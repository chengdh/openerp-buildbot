
c = BuildmasterConfig = {}

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("testslave", "pap")]
c['slavePortnum'] = 9989

####### CHANGESOURCES

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler,Periodic
c['schedulers'] = []
periodic = Periodic("every_minute", ["builder_dir"], 30)

periodic_sec = Periodic("every_sec", ["builder_dir1"], 30,branch='https://launchpad.net/~pap-openerp/openerp-buildbot/openerp-buildbot')
c['schedulers'] = [periodic,periodic_sec]

####### BUILDERS
from buildbot.process import factory
from buildbot.steps.source import Bzr
from buildbot.steps.shell import ShellCommand,MakeClientBranch,MakeServerBranch,MakeAddonsBranch
from buildbot.steps.python_twisted import Trial

class runServer(ShellCommand):
    name = "run server"
    haltOnFailure = 1
    description = ["running server"]
    descriptionDone = ["server is running"]
    command = ["python","/home/tiny/buildbot/test_buildbot/slave/dir_dir/server/bin/openerp-server.py"]

class createDB(ShellCommand):
    name = "create test database"
    haltOnFailure = 1
    description = ["creating test database"]
    descriptionDone = ["test database created successfully"]
    command = ["python","/home/tiny/buildbot/test_buildbot/slave/dir_dir/script/createDB.py"]

f_makedir = factory.BuildFactory()

f_makedir1 = factory.BuildFactory()

f_makedir1.addStep()

f_makedir.addStep(Bzr(baseURL='https://launchpad.net/~openerp/openobject-server/',defaultBranch='5.0',mode='update',workdir='server'))

f_makedir.addStep(Bzr(baseURL='https://code.launchpad.net/~openerp/openobject-addons/',defaultBranch='5.0',mode='update',workdir='addons'))

f_makedir.addStep(runServer())

f_makedir.addStep(createDB())

b4 = {'name': "builder_dir",
      'slavename': "testslave",
      'builddir': "dir_dir",
      'factory': f_makedir,
     }
b5 = {'name': "builder_dir1",
      'slavename': "testslave",
      'builddir': "dir_dir1",
      'factory': f_makedir1,
     }

c['builders'] = [b4,b5]


####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010))

####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Buildbot"
c['projectURL'] = "http://buildbot.sourceforge.net/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"
