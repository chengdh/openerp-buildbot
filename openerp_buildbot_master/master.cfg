# -*- encoding: utf-8 -*-

from sets import Set
from buildbot.process.factory import BuildFactory
from buildbot.buildslave import BuildSlave
from openobject.scheduler import OpenObjectScheduler, OpenObjectAnyBranchScheduler
from openobject.buildstep import OpenObjectBzr, OpenObjectSVN, CreateDB,  CreateDB2, InstallModule, InstallModule2, InstallTranslation, CheckQuality, DropDB, Copy, StartServer, MakeOpenERPTest
from openobject.poller import BzrPoller
from buildbot.changes.svnpoller import SVNPoller
from openobject.status import web, mail, logs
from openobject import buildstep
from openobject.sql import db_connection
from openobject.xmlrpc import buildbot_xmlrpc
from buildbot import locks

db_lock = locks.MasterLock("database")
cpu_lock = locks.SlaveLock("cpu")
import os

BuildmasterConfig = c = {}
c['projectName'] = "OpenERP-Test"
#c['projectURL'] = 'http://www.openerp.com'
c['buildbotURL'] = "http://test.openobject.com/"

c['slaves'] = [BuildSlave('openerp_bot', 'tiny')]
c['slavePortnum'] = 8999
c['schedulers'] = []
c['builders'] = []
c['change_source']=[]
c['openerp-dbname'] = 'buildbot'
c['openerp-host'] = 'localhost'
c['openerp-port'] = 8069
c['openerp-userid'] = 'admin'
c['openerp-userpwd'] = 'a'


### Get Tesing Branches from OpenERP Server ###

openerp = buildbot_xmlrpc(host=c['openerp-host'], port=c['openerp-port'], dbname=c['openerp-dbname'])
openerp-uid = openerp.login(c['openerp-userid'], c['openerp-userpwd'])
testing_branches_ids = self.execute('object', 'execute', self.dbname, openerp-uid, c['openerp-userpwd'], 'buildbot.lp.branch','search',[('is_test_branch','=',False), ('is_root_branch','=',False)])	
testing_branches = self.execute('object', 'execute', self.dbname, openerp-uid, c['openerp-userpwd'], 'buildbot.lp.branch','read',testing_branches_ids)	

change_source_urls = []	

for branch in testing_branches:	
    branch_name = branch['name']
    branch_url = branch['url']
    dbname = branch['dbname']
    port = branch['port']
    netport = branch['netport']
    builddir = branch['build_directory']
    treestabletimer = branch['treestabletimer']
    test_server_url = branch['test_server_branch_url']
    test_addons_url = branch['test_addons_branch_url']
    test_server_workdir = 'openerp-server'
    test_addons_workdir = '../openerp-addons'

    ### CHANGE SOURCES ###
    c['change_source'].append(BzrPoller(branch_url))

    ### Build_factories ###
    factory = BuildFactory()

    # Get Test Server Source
    factory.addStep(OpenObjectBzr(repourl=test_server_url, mode='update', workdir=test_server_workdir, alwaysUseLatest=True))

    # Get Test Addons Source
    factory.addStep(OpenObjectBzr(baseURL=test_addons_url, mode='update', workdir=test_addons_workdir, alwaysUseLatest=True))

    # Merge Testing branch Source

    # Test Create DB 
    factory.addStep(CreateDB(dbname=dbname, workdir=test_server_workdir, addonsdir=test_addons_workdir, netport=netport, port=port, locks=[db_lock]))

    # Test Install Module 
    factory.addStep(InstallModule(workdir=test_server_workdir, addonsdir=test_addons_workdir, dbname=dbname, netport=netport, port=port))

    # Test Translation
    factory.addStep(InstallTranslation(workdir=test_server_workdir, addonsdir=test_addons_workdir, dbname=dbname, netport=netport, port=port))

    # Test Quality
    factory.addStep(CheckQuality(dbname=dbname, workdir=test_server_workdir, netport=netport, port=port, addonsdir=test_addons_workdir)

    # Test Drop DB
    factory.addStep(DropDB(dbname=dbname, workdir=test_server_workdir, port=port))

    
    ### Builders ###
    c['builders'].append({
        'name' : branch_name, 
        'slavename' : 'openerp_bot',
        'builddir': builddir, 
        'factory': factory
    })

    ### Schedulers ###
    c['schedulers'].append(
        OpenObjectScheduler(name = "Scheduler for %s" %(branch_name),
    		   builderNames = [branch_name],
    		   branch = branch_url,
               treeStableTimer = treestabletimer)
    )

	

web.ROOT_PATH =  os.path.abspath('.')
c['status'] = []
c['status'].append(web.OpenObjectWebStatus(http_port=8010))

MAIL_ATTRIBUTES = {
              'mail_watcher'   : ['hmo@tinyerp.com'],
              'want_html_mail' : False, # True value will send mail in HTML
              'sender_username': '',
              'sender_password': '',
              'sender_email'   : 'OpenERP <noreply@tinyerp.com>',
              'reply_to'       : 'support@tinyerp.com',
              'smtp_host'      : 'smtp.tinyerp.com',
              'email_use_TLS'  : True,
              'mode'           : 'failing', # 'all':sends mail when step is either success/failure or had problem.
                                            # 'problem':sends mail when step had problem.
                                            # 'failing':sends mail when step fails.

             }


#c['status'].append(mail.OpenObjectMailNotifier(username = MAIL_ATTRIBUTES['sender_username'],
#                                      password = MAIL_ATTRIBUTES['sender_password'],
#                                      fromaddr = MAIL_ATTRIBUTES['sender_email'],
#                                      reply_to = MAIL_ATTRIBUTES['reply_to'],
#                                      relayhost = MAIL_ATTRIBUTES['smtp_host'],
#                                      mode = MAIL_ATTRIBUTES['mode'],
#                                      extraRecipients = MAIL_ATTRIBUTES['mail_watcher'],
#                                      mail_watcher = MAIL_ATTRIBUTES['mail_watcher'],
#                                      html_body = MAIL_ATTRIBUTES['want_html_mail'],
#                                      TLS = MAIL_ATTRIBUTES['email_use_TLS']))


def split_file(path):
	return ('https://svn.tinyerp.com/be/maintenance', path)


#### unregister the TextLog adapter registered by buildbot
from twisted.python import components
from zope.interface import interface, declarations
from buildbot.interfaces import IStatusLog
from buildbot.status.web.base import IHTMLLog
from buildbot.status.builder import HTMLLogFile

globalRegistry = components.getRegistry()
origInterface = declarations.implementedBy(IStatusLog)

globalRegistry.unregister(declarations.implementedBy(HTMLLogFile), IHTMLLog,'')

#### register a new TextLog adapter
components.registerAdapter(logs.TextLog, IStatusLog, IHTMLLog)
