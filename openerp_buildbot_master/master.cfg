# -*- encoding: utf-8 -*-
from buildbot.process.factory import BuildFactory
from buildbot.buildslave import BuildSlave
from openobject.scheduler import OpenObjectScheduler, OpenObjectAnyBranchScheduler
from openobject.buildstep import OpenObjectBzr, OpenObjectSVN, CreateDB,  CreateDB2, InstallModule, InstallModule2, InstallTranslation, CheckQuality, DropDB, Copy, StartServer
from openobject.poller import BzrPoller
from buildbot.changes.svnpoller import SVNPoller
from openobject.status import web, mail, logs
from openobject import buildstep
from openobject.sql import db_connection
from buildbot import locks

db_lock = locks.MasterLock("database")
cpu_lock = locks.SlaveLock("cpu")
import os

BuildmasterConfig = c = {}
c['projectName'] = "OpenERP-Test"
#c['projectURL'] = 'http://www.openerp.com'
c['buildbotURL'] = "http://test.openobject.com/"

c['slaves'] = [BuildSlave('openerp_bot', 'tiny')]
c['slavePortnum'] = 8999
c['schedulers'] = []
c['builders'] = []
c['change_source']=[]

### GET BUILDBOT DATA ###
data_dict=[]
query='''
select PR.name as pr_name,
       test_server_BR.name as tester_server_br, test_server_BR.url as tester_server_br_url,
       test_addons_BR.name as tester_addons_br, test_addons_BR.url as tester_addons_br_url,
       BR.id as testing_br_id, BR.name as testing_br_name, BR.url as testing_br_url,
       SH.id as sh_id, SH.name as sh_name, SH.treestabletimer as treestabletimer,
       BB.id as bd_id, BB.name as bd_name, BB.dbname as dbname,
       BLD_DIR.name as builddir, WRK_DIR.name as workdir, ADDONS_DIR.name as addonsdir	   
from buildbot_lp_branch as BR	   
join buildbot_lp_project as PR on BR.lp_project_id = PR.id
join buildbot_lp_branch as test_addons_BR on test_addons_BR.id = PR.tester_addons_branch_id
join buildbot_lp_branch as test_server_BR on test_server_BR.id = PR.tester_server_branch_id
join buildbot_scheduler as SH on SH.change_branch_id = BR.id
join buildbot_builder as BB on SH.builder_id = BB.id
join buildbot_directory as WRK_DIR on WRK_DIR.id = BB.workdir
join buildbot_directory as BLD_DIR on BLD_DIR.id = BB.build_directory
join buildbot_directory as ADDONS_DIR on ADDONS_DIR.id = BB.addons_dir
'''
db_cn = db_connection(dbname='pap15', user='tiny')
rows, col_names = db_cn.get_rows_and_columns(query)
for r in rows:
	d={}
	for j in range (len(col_names)):
		val = str(r[j]).strip()
		d[col_names[j]] = val
  	data_dict.append(d)  	
print "data_dict--",data_dict

### CHANGE SOURCES ###
change_source_ids = [x['testing_br_id'] for x in data_dict]
from sets import Set
change_source_ids = list(Set(change_source_ids))

change_source_urls = list(x['testing_br_url'] for x in data_dict)
change_source_urls = list(Set(change_source_urls))
for url in change_source_urls:
	c['change_source'].append(BzrPoller(url))

### Schedulers, Build_factories, Builders ###
scheduler_ids = [x['sh_id'] for x in data_dict]
from sets import Set
scheduler_ids = list(Set(scheduler_ids))

schedulers_names = list(x['sh_name'] for x in data_dict)
schedulers_names = list(Set(schedulers_names))
for sch in schedulers_names:	
	builder = [x['bd_name'] for x in data_dict if x['sh_name'] == sch][0]
	change_branches = [(x['testing_br_name'], x['testing_br_url']) for x in data_dict if x['sh_name'] == sch]
	tester_server_branches = []#[(x['tester_server_br'], x['tester_server_br_url']) for x in data_dict if x['sh_name'] == sch]
	tester_addons_branches = []#[(x['tester_addons_br'], x['tester_addons_br_url']) for x in data_dict if x['sh_name'] == sch]
	up_branches = tester_server_branches + tester_addons_branches + change_branches  
	print "up_branches----",up_branches
	
	dbname = list(x['dbname'] for x in data_dict if x['bd_name'] == builder)[0]
	workdir = list(x['workdir'] for x in data_dict if x['bd_name'] == builder)[0]
	addonsdir = list(x['addonsdir'] for x in data_dict if x['bd_name'] == builder)[0]
	builddir = list(x['builddir'] for x in data_dict if x['bd_name'] == builder)[0]
	
	args=dict(dbname=dbname, workdir=workdir, addonsdir=addonsdir, netport=8949, port=8959,)
	
	build_factory = BuildFactory()	
	for br in up_branches:
		up_args={'baseURL':br[1],
			 'defaultBranch':'',
			  'mode':'update',
			  'workdir':br[0],
			  'alwaysUseLatest':True}
		build_factory.addStep(OpenObjectBzr(**up_args))
	build_factory.addStep(CreateDB(locks=[db_lock],**args))
	build_factory.addStep(InstallModule(**args))
	build_factory.addStep(InstallTranslation(**args))
	build_factory.addStep(CheckQuality(**args))
	del args['addonsdir']
	build_factory.addStep(DropDB(**args))
	
	bldr = {'name':builder, 
			'slavename':'openerp_bot',
			'builddir': builddir, 
			'factory':build_factory}
	c['builders'].append(bldr)

	treestabletimer = list(x['treestabletimer'] for x in data_dict if x['sh_name'] == sch)[0]
	args = {'name' : sch,
                'builderNames' : [builder],
                'branches' : [x[1] for x in change_branches],
                'treeStableTimer' : int(treestabletimer),}
                
	c['schedulers'].append(OpenObjectAnyBranchScheduler(**args))
	
print "\n\n\nc['change_source']--",c['change_source']
print "\n\n\nc['builders']---",c['builders']
print "\n\n\nc['schedulers']---",c['schedulers']

web.ROOT_PATH =  os.path.abspath('.')
c['status'] = []
c['status'].append(web.OpenObjectWebStatus(http_port=8010))

MAIL_ATTRIBUTES = {
              'mail_watcher'   : ['hmo@tinyerp.com'],
              'want_html_mail' : False, # True value will send mail in HTML
              'sender_username': '',
              'sender_password': '',
              'sender_email'   : 'OpenERP <noreply@tinyerp.com>', 
              'reply_to'       : 'support@tinyerp.com', 
              'smtp_host'      : 'smtp.tinyerp.com',
              'email_use_TLS'  : True,
              'mode'           : 'failing', # 'all':sends mail when step is either success/failure or had problem.  
                                            # 'problem':sends mail when step had problem.  
                                            # 'failing':sends mail when step fails.  
              
             }


#c['status'].append(mail.OpenObjectMailNotifier(username = MAIL_ATTRIBUTES['sender_username'],
#                                      password = MAIL_ATTRIBUTES['sender_password'],
#                                      fromaddr = MAIL_ATTRIBUTES['sender_email'],
#                                      reply_to = MAIL_ATTRIBUTES['reply_to'],
#                                      relayhost = MAIL_ATTRIBUTES['smtp_host'],
#                                      mode = MAIL_ATTRIBUTES['mode'],                                
#                                      extraRecipients = MAIL_ATTRIBUTES['mail_watcher'],
#                                      mail_watcher = MAIL_ATTRIBUTES['mail_watcher'],
#                                      html_body = MAIL_ATTRIBUTES['want_html_mail'],
#                                      TLS = MAIL_ATTRIBUTES['email_use_TLS']))


def split_file(path):
	return ('https://svn.tinyerp.com/be/maintenance', path)		


#### unregister the TextLog adapter registered by buildbot
from twisted.python import components
from zope.interface import interface, declarations
from buildbot.interfaces import IStatusLog
from buildbot.status.web.base import IHTMLLog
from buildbot.status.builder import HTMLLogFile

globalRegistry = components.getRegistry()
origInterface = declarations.implementedBy(IStatusLog)

globalRegistry.unregister(declarations.implementedBy(HTMLLogFile), IHTMLLog,'')

#### register a new TextLog adapter
components.registerAdapter(logs.TextLog, IStatusLog, IHTMLLog)
