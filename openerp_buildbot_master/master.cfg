from buildbot.process.factory import BuildFactory
from buildbot.buildslave import BuildSlave
from buildbot.steps.source import Source, Bzr
from buildbot.scheduler import Scheduler,Periodic
from buildbot.status import html
from buildbot.changes.pb import PBChangeSource
from buildbot.steps.shell import ShellCommand
from buildbot.process.buildstep import LoggingBuildStep, LoggedRemoteCommand
from buildbot.status.builder import SUCCESS, FAILURE, WARNINGS
try:
    import cStringIO
    StringIO = cStringIO.StringIO
except ImportError:
    from StringIO import StringIO

BuildmasterConfig = c = {}
c['projectName'] = 'OpenERP'
c['projectURL'] = 'http://www.openerp.com'
c['buildbotURL'] = "http://localhost:8010/"

c['slaves'] = [BuildSlave('openerp_bot', 'tiny')]
c['slavePortnum'] = 9999
c['schedulers'] = []
c['builders'] = []


class PyFlakes(LoggingBuildStep):
    name = 'pyflakes'
    flunkOnFailure = False
    flunkingIssues = ["undefined"] # any pyflakes lines like this cause FAILURE
    MESSAGES = ("unused", "undefined", "redefs", "import*", "misc")
    def describe(self, done=False):
        if done:
            return self.descriptionDone
        return self.description
    def __init__(self, branch=None,workdir=None,**kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        self.addFactoryArguments(branch=branch, workdir=workdir)        
        self.args = {'files': None, # set during start                     
                     'workdir': workdir,                     
        }
        
        # Compute defaults for descriptions:
        description = ["running", "pyflakes"]
        descriptionDone = ["pyflakes"]
        
        self.description = description
        self.descriptionDone = descriptionDone
        self.branch = branch

    def createSummary(self, log):
        counts = {}
        summaries = {}
        for m in self.MESSAGES:
            counts[m] = 0
            summaries[m] = []

        first = True
        for line in StringIO(log.getText()).readlines():
            # the first few lines might contain echoed commands from a 'make
            # pyflakes' step, so don't count these as warnings. Stop ignoring
            # the initial lines as soon as we see one with a colon.
            if first:
                if line.find(":") != -1:
                    # there's the colon, this is the first real line
                    first = False
                    # fall through and parse the line
                else:
                    # skip this line, keep skipping non-colon lines
                    continue
            if line.find("imported but unused") != -1:
                m = "unused"
            elif line.find("*' used; unable to detect undefined names") != -1:
                m = "import*"
            elif line.find("undefined name") != -1:
                m = "undefined"
            elif line.find("redefinition of unused") != -1:
                m = "redefs"
            else:
                m = "misc"
            summaries[m].append(line)
            counts[m] += 1

        self.descriptionDone = self.descriptionDone[:]
        for m in self.MESSAGES:
            if counts[m]:
                self.descriptionDone.append("%s=%d" % (m, counts[m]))
                self.addCompleteLog(m, "".join(summaries[m]))
            self.setProperty("pyflakes-%s" % m, counts[m])
        self.setProperty("pyflakes-total", sum(counts.values()))


    def evaluateCommand(self, cmd):
        if cmd.rc != 0:
            return FAILURE
        for m in self.flunkingIssues:
            if self.getProperty("pyflakes-%s" % m):
                return FAILURE
        if self.getProperty("pyflakes-total"):
            return WARNINGS
        return SUCCESS

    def start(self):        
        s = self.build.getSourceStamp()        
        files = []
        for change in s.changes:
            if self.branch == change.branch:
                for f in change.files:
                    fname,ext = os.path.splitext(f.split('/')[-1])
                    if ext == 'py':
                        files.append(f)
        if len(files):
            self.args['files'] = files
            cmd = LoggedRemoteCommand("pyflakes", self.args)
        else:
            cmd = LoggedRemoteCommand("dummy", self.args)
        self.startCommand(cmd)

class CreateDB(LoggingBuildStep):
    name = 'create-db'

    def describe(self, done=False):
        if done:
            return self.descriptionDone + [self.dbname]
        return self.description

    def __init__(self, workdir, dbname='test',**kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        self.addFactoryArguments(workdir=workdir,dbname=dbname)        
        self.args = {'workdir':workdir,'dbname': dbname}  
        self.dbname = dbname
        # Compute defaults for descriptions:
        description = ["creating", "db"]
        descriptionDone = ["created"]
        
        self.description = description
        self.descriptionDone = descriptionDone

    def start(self):                      
        cmd = LoggedRemoteCommand("create-db", self.args)
        self.startCommand(cmd)

class DropDB(LoggingBuildStep):
    name = 'drop-db'

    def describe(self, done=False):
        if done:
            return self.descriptionDone + [self.dbname]
        return self.description

    def __init__(self, workdir, dbname='test',**kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        self.addFactoryArguments(workdir = workdir,dbname=dbname)        
        self.args = {'workdir' : workdir, 'dbname': dbname}        
        # Compute defaults for descriptions:
        description = ["droping", "db"]
        descriptionDone = ["drop"]
        self.dbname = dbname
        self.description = description
        self.descriptionDone = descriptionDone

    def start(self):                      
        cmd = LoggedRemoteCommand("drop-db", self.args)
        self.startCommand(cmd)
        
class TestServer(LoggingBuildStep):
    name = 'test-server'

    def describe(self, done=False):
        if done:
            return self.descriptionDone
        return self.description

    def __init__(self, branch, dbname='test', pidfile='test', workdir=None,addonsdir=None,modules=[],**kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        self.addFactoryArguments(branch=branch,workdir=workdir,addonsdir=addonsdir,modules=modules, dbname=dbname, pidfile=pidfile)        
        self.args = {'addonsdir': addonsdir, 
                     'workdir': workdir,
                     'dbname' : dbname,
                     'pidfile' : pidfile,
                     'modules' : modules,
                                     
        }
        
        # Compute defaults for descriptions:
        description = ["testing", "server"]
        descriptionDone = ["tested","server"]
        
        self.description = description
        self.descriptionDone = descriptionDone
        self.branch = branch
    def start(self):      
        s = self.build.getSourceStamp()        
        modules = []
        pofiles = []
        for change in s.changes:
            if self.branch == change.branch:
                for f in change.files:
                    module = os.path.splitext(f.split('/')[0])
                    modules.append(module)
                    fname,ext = os.path.splitext(f.split('/')[-1])
                    if ext == 'po':
                        pofiles.append(f)   
        self.args['pofiles'] = pofiles
        if not len(self.args['modules']):
           self.args['modules'] = modules
        cmd = LoggedRemoteCommand("test-server",self.args)
        self.startCommand(cmd)

    def createSummary(self, log):
        counts = {}
        summaries = {}        

        first = True
        for line in StringIO(log.getText()).readlines():
            print line

        


    def evaluateCommand(self, cmd):
        if cmd.rc != 0:
            return FAILURE
        #for m in self.flunkingIssues:            
        #    return FAILURE
        
        return SUCCESS




        

stable_openobject_server_factory = BuildFactory()
stable_openobject_server_factory.addStep(Bzr(baseURL='https://launchpad.net/~openerp/openobject-server/',defaultBranch='5.0',mode='update',workdir='5.0'))
stable_openobject_server_factory.addStep(PyFlakes(branch='https://launchpad.net/~openerp/openobject-server/5.0',workdir='5.0'))
stable_openobject_server_factory.addStep(CreateDB(workdir='5.0'))
stable_openobject_server_factory.addStep(TestServer(branch='https://launchpad.net/~openerp/openobject-server/5.0',workdir='5.0/bin',addonsdir='5.0/bin/addons',modules=['base']))
stable_openobject_server_factory.addStep(DropDB(workdir='5.0'))

trunk_openobject_server_factory = BuildFactory()
trunk_openobject_server_factory.addStep(Bzr(baseURL='https://launchpad.net/~openerp/openobject-server/',defaultBranch='trunk',mode='update',workdir='trunk'))
trunk_openobject_server_factory.addStep(PyFlakes(branch='https://launchpad.net/~openerp/openobject-server/trunk',workdir='trunk'))
trunk_openobject_server_factory.addStep(CreateDB(workdir='5.0'))
trunk_openobject_server_factory.addStep(TestServer(branch='https://launchpad.net/~openerp/openobject-server/trunk',workdir='trunk/bin',modules=['base']))
trunk_openobject_server_factory.addStep(DropDB(workdir='5.0'))

stable_openobject_addons_factory = BuildFactory()
stable_openobject_addons_factory.addStep(Bzr(baseURL='https://launchpad.net/~openerp/openobject-addons/',defaultBranch='5.0',mode='update',workdir='5.0'))
stable_openobject_addons_factory.addStep(PyFlakes(branch='https://launchpad.net/~openerp/openobject-addons/5.0',workdir='5.0'))
stable_openobject_addons_factory.addStep(CreateDB(workdir='5.0'))
stable_openobject_addons_factory.addStep(TestServer(branch='https://launchpad.net/~openerp/openobject-addons/5.0',workdir='../stable_openobject_addons/5.0/bin',addonsdir='5.0'))
stable_openobject_addons_factory.addStep(DropDB(workdir='5.0'))

trunk_openobject_addons_factory = BuildFactory()
trunk_openobject_addons_factory.addStep(Bzr(baseURL='https://launchpad.net/~openerp/openobject-addons/',defaultBranch='trunk',mode='update',workdir='trunk'))
trunk_openobject_addons_factory.addStep(PyFlakes(branch='https://launchpad.net/~openerp/openobject-addons/trunk',workdir='trunk'))
trunk_openobject_addons_factory.addStep(CreateDB(workdir='5.0'))
trunk_openobject_addons_factory.addStep(TestServer(branch='https://launchpad.net/~openerp/openobject-addons/trunk',workdir='../trunk_openobject_server/trunk/bin',addonsdir='trunk'))
trunk_openobject_addons_factory.addStep(DropDB(workdir='5.0'))

trunk_extra_addons_factory = BuildFactory()
trunk_extra_addons_factory.addStep(Bzr(baseURL='https://launchpad.net/~openerp-commiter/openobject-addons/',defaultBranch='trunk-extra-addons',mode='update',workdir='trunk'))
trunk_extra_addons_factory.addStep(PyFlakes(branch='https://launchpad.net/~openerp-commiter/openobject-addons/trunk-extra-addons',workdir='trunk'))

trunk_addons_community_factory = BuildFactory()
trunk_addons_community_factory.addStep(Bzr(baseURL='https://launchpad.net/~openerp-community/openobject-addons/',defaultBranch='trunk-addons-community',mode='update',workdir='trunk'))
trunk_addons_community_factory.addStep(PyFlakes(branch='https://launchpad.net/~openerp-community/openobject-addons/trunk-addons-community',workdir='trunk'))

c['builders'] = [
    {'name':'stable_openobject_server', 'slavename':'openerp_bot','builddir':'stable_openobject_server', 'factory':stable_openobject_server_factory},
    {'name':'stable_openobject_addons', 'slavename':'openerp_bot','builddir':'stable_openobject_addons', 'factory':stable_openobject_addons_factory},
        
    {'name':'trunk_openobject_server', 'slavename':'openerp_bot','builddir':'trunk_openobject_server', 'factory':trunk_openobject_server_factory},
    {'name':'trunk_openobject_addons', 'slavename':'openerp_bot','builddir':'trunk_openobject_addons', 'factory':trunk_openobject_addons_factory},
    {'name':'trunk_extra_addons', 'slavename':'openerp_bot','builddir':'trunk_extra_addons', 'factory':trunk_extra_addons_factory},    
    {'name':'trunk_addons_community', 'slavename':'openerp_bot','builddir':'trunk_addons_community', 'factory':trunk_addons_community_factory}, 
    
   ]



c['schedulers'] = [
        Scheduler("Scheduler for openobject-server-5.0","https://launchpad.net/~openerp/openobject-server/5.0/" , 30,["stable_openobject_server"]),
        Scheduler("Scheduler for openobject-addons-5.0","https://launchpad.net/~openerp/openobject-addons/5.0/" , 30, ["stable_openobject_addons"]),
        Scheduler("Scheduler for openobject-server-trunk","https://launchpad.net/~openerp/openobject-server/trunk/" , 30, ["trunk_openobject_server"]),
        Scheduler("Scheduler for openobject-addons-trunk","https://launchpad.net/~openerp/openobject-addons/trunk/" , 30, ["trunk_openobject_addons"]),
        Scheduler("Scheduler for trunk-extra-addons","https://launchpad.net/~openerp-commiter/openobject-addons/trunk-extra-addons" , 30, ["trunk_extra_addons"]),
        Scheduler("Scheduler for trunk-addons-community","https://launchpad.net/~openerp-community/openobject-addons/trunk-addons-community" , 30, ["trunk_addons_community"]),        
       ]

c['status'] = []
c['status'].append(html.WebStatus(http_port=8010))




# bzr pooler class

from zope.interface import implements
from twisted.python import log
from twisted.application import service, internet

from buildbot import util, interfaces
from buildbot.changes.changes import Change

from bzrlib.branch import Branch
import bzrlib

class BzrPoller(service.MultiService, util.ComparableMixin):
    """This source will poll a Bzr repository for changes and submit them to
    the change master."""
    implements(interfaces.IChangeSource)

    compare_attrs = ["location", "pollinterval"]
                     

    parent = None # filled in when we're added
    last_change = None
    loop = None
    working = False

    def __init__(self, location, pollinterval=10*60, callback=False):
        """
        @type  location: string
        @param location: the URL of the branch that this poller should watch.
                         This is typically an http: or sftp: URL.

        @type  pollinterval: int
        @param pollinterval: interval in seconds between polls. The default
                             is 600 seconds (10 minutes). Smaller values
                             decrease the latency between the time a change
                             is recorded and the time the buildbot notices
                             it, but it also increases the system load.
        """
        service.MultiService.__init__(self)

        self.location = location
        self.last_revno = 0
        self.pollinterval = pollinterval
        self.overrun_counter = 0
        self.callback = callback
        timer = internet.TimerService(pollinterval, self.poll)
        timer.setServiceParent(self)

    def describe(self):
        return "BzrPoller watching %s" % self.location

    def poll(self):
        log.msg("BzrPoller polling")
        # location="http://bazaar-vcs.org/bzr/bzr.dev"
        b = Branch.open_containing(self.location)[0]
        bzrlib.trace.enable_default_logging()
        # this is subclass of bzrlib.branch.Branch
        current_revision = b.revno()
        if not self.last_revno:
            self.last_revno = current_revision - 1
        # NOTE: b.revision_history() does network IO, and is blocking.
        revisions = b.revision_history()[self.last_revno:] # each is an id string
        changes = []
        for r in revisions:
            rev = b.repository.get_revision(r)
            # bzrlib.revision.Revision
            who = rev.committer
            comments = rev.message
            when = rev.timestamp
            # rev.timezone, interesting. Not sure it's used.

            d = b.repository.get_revision_delta(r)
            # this is a delta.TreeDelta
            files = ([f[0] for f in d.added] +
                     [f[0] for f in d.removed] +
                     [f[1] for f in d.renamed] +
                     [f[0] for f in d.modified]
                     )            
            revision= b.revision_id_to_revno(r) #b.get_rev_id()
            branch= self.location #b.get_master_branch()
            c = Change(who=rev.committer,
                       files=files,
                       comments=rev.message,
                       when=rev.timestamp,
                       revision = revision,
                       branch = branch
                       )
            changes.append(c)
        self.last_revno = current_revision
        if self.callback:
            self.callback(self.location,changes)
        for c in changes:
            self.parent.addChange(c)
        log.msg("BzrPoller finished polling, %d changes found" % len(changes))


#c['change_source'] = BzrPoller('https://launchpad.net/~openerp/openobject-server/5.0/') 


c['change_source'] = [
        BzrPoller('https://launchpad.net/~openerp/openobject-server/5.0/'),
        BzrPoller('https://launchpad.net/~openerp/openobject-addons/5.0/'),
        BzrPoller('https://launchpad.net/~openerp-commiter/openobject-addons/trunk-extra-addons'),
        BzrPoller('https://launchpad.net/~openerp-community/openobject-addons/trunk-addons-community'),
        ]









