# -*- encoding: utf-8 -*-
from buildbot.process.factory import BuildFactory
from buildbot.buildslave import BuildSlave
from buildbot.steps.source import Source, Bzr
from buildbot.scheduler import AnyBranchScheduler,Scheduler
from buildbot.status import html
from buildbot.steps.shell import ShellCommand
from buildbot.process.buildstep import LoggingBuildStep, LoggedRemoteCommand
from buildbot.status.builder import SUCCESS, FAILURE, WARNINGS
import pickle
import os
from lxml import etree
try:
    import cStringIO
    StringIO = cStringIO.StringIO
except ImportError:
    from StringIO import StringIO

BuildmasterConfig = c = {}
#c['projectName'] = 'OpenERP'
#c['projectURL'] = 'http://www.openerp.com'
c['buildbotURL'] = "http://localhost:8010/"

c['slaves'] = [BuildSlave('openerp_bot', 'tiny')]
c['slavePortnum'] = 8999
c['schedulers'] = []
c['builders'] = []


class CreateDB(LoggingBuildStep):
    name = 'create-db'

    def describe(self, done=False):
        if done:
            return self.descriptionDone + [self.dbname]
        return self.description

    def __init__(self, dbname='test',workdir=None, demo=True, lang='en_US', port=8869 ,**kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        self.addFactoryArguments(dbname=dbname,workdir=workdir, demo=demo, lang=lang, port=port)
        self.args = {'dbname': dbname,'workdir':workdir, 'demo':demo, 'lang':lang, 'port' : port}
        self.dbname = dbname
        # Compute defaults for descriptions:
        description = ["creating", "db"]
        descriptionDone = ["created","db"]

        self.description = description
        self.descriptionDone = descriptionDone

    def start(self):
        self.args['command']=["make","Makefile","create-db"]
        if self.args['dbname']:
            self.args['command'].append("database=%s"%(self.args['dbname']))
        if self.args['port']:
            self.args['command'].append("port=%s"%(self.args['port']))
        cmd = LoggedRemoteCommand("shell",self.args)        
        self.startCommand(cmd)
    
    def evaluateCommand(self, cmd):
        if cmd.rc != 0:
            return FAILURE
        return SUCCESS

class DropDB(LoggingBuildStep):
    name = 'drop-db'

    def describe(self, done=False):
        if done:
            return self.descriptionDone + [self.dbname]
        return self.description

    def __init__(self, dbname='test',workdir=None,port=8869,**kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        self.addFactoryArguments(dbname=dbname,workdir=workdir)
        self.args = {'dbname': dbname,'workdir':workdir,'port':port}
        self.dbname = dbname
        # Compute defaults for descriptions:
        description = ["Dropping", "db"]
        descriptionDone = ["Dropped", "db"]

        self.description = description
        self.descriptionDone = descriptionDone

    def start(self):
        self.args['command']=["make","Makefile","drop-db"]
        if self.args['dbname']:
            self.args['command'].append("database=%s"%(self.args['dbname']))
        if self.args['port']:
            self.args['command'].append("port=%s"%(self.args['port']))
        cmd = LoggedRemoteCommand("shell",self.args)        
        self.startCommand(cmd)

    def evaluateCommand(self, cmd):
        if cmd.rc != 0:
            return FAILURE
        return SUCCESS

class CheckQuality(LoggingBuildStep):
    name = 'check-quality'
    MESSAGES = ("ERROR", "CRITICAL", "WARNING")

    def describe(self, done=False):
        if done:
            return self.descriptionDone
        return self.description

    def __init__(self, dbname='test',workdir=None,addonsdir=None,netport=8970, port=8869 ,**kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        self.addFactoryArguments(dbname=dbname,workdir=workdir,addonsdir=addonsdir,netport=netport, port=port)
        self.args = {'dbname': dbname, 'modules':'', 'port' :port,'workdir':workdir,'netport':netport,'addonsdir':addonsdir}
        self.dbname = dbname
        # Compute defaults for descriptions:
        description = ["checking", "quality"]
        descriptionDone = ["checked","quality"]

        self.description = description
        self.descriptionDone = descriptionDone

    def start(self):
        s = self.build.getSourceStamp()
        modules = []
        for change in s.changes:
            for f in change.files:
                module = f.split('/')[0]
                if module in ('bin','Makefile','man','README','setup.cfg','setup.py','doc','MANIFEST.in','openerp.log','pixmaps','rpminstall_sh.txt','setup.nsi','win32'):
                    continue
                if module not in modules:
                    modules.append(str(module))
        
        self.args['modules'] = ','.join(modules)        
        if self.args['modules']:
            self.description.append(self.args['modules'])
            self.args['command']=["make","Makefile","check-quality"]

            if self.args['addonsdir']:
                self.args['command'].append("addons-path=%s"%(self.args['addonsdir']))
            if self.args['netport']:
                self.args['command'].append("net_port=%s"%(self.args['netport']))
            if self.args['port']:
                self.args['command'].append("port=%s"%(self.args['port']))
            if self.args['modules']:
                self.args['command'].append("module=%s"%(self.args['modules']))
            if self.args['dbname']:
                self.args['command'].append("database=%s"%(self.args['dbname']))
            cmd = LoggedRemoteCommand("shell",self.args)
            self.startCommand(cmd)
        else:
            cmd = LoggedRemoteCommand("dummy", self.args)
            self.startCommand(cmd)

    def createSummary(self, log):
        data = False
        logs = log.getText()
            
        counts = {}
        summaries = {}
        for m in self.MESSAGES:
            counts[m] = 0
            summaries[m] = []

        io = StringIO(log.getText()).readlines()

        for line in io:
            if line.find("ERROR") != -1:
                pos = line.find("ERROR") + len("ERROR") + 5
                m = "ERROR"
            elif line.find("INFO:") != -1:
                continue
            elif line.find("CRITICAL") != -1:
                pos = line.find("CRITICAL") + len("CRITICAL") + 5
                m = "CRITICAL"
            elif line.find("Traceback") != -1:
                traceback_log = []
                pos = io.index(line)
                for line in io[pos:-3]:
                    traceback_log.append(line)
                self.addCompleteLog("Check-Quality : Traceback", "".join(traceback_log))
                break;
            elif line.find("WARNING") != -1:
                pos = line.find("WARNING") + len("WARNING") + 5
                m = "WARNING"
            else:
                continue
            line = line[pos:]
            summaries[m].append(line)
            counts[m] += 1
        self.descriptionDone = self.descriptionDone[:]
        for m in self.MESSAGES:
            if counts[m]:
                msg = "".join(summaries[m])
                self.addCompleteLog("Check-Quality : %s" % m, msg)    
                self.setProperty("Check-Quality : %s" % m, counts[m]) 
        if sum(counts.values()):       
            self.setProperty("Check-Quality : MessageCount", sum(counts.values()))

        if logs.find('LOG PATH') != -1:
            path = logs.split('LOG PATH')[1]
            file_path = (path.split('\r'))[0]
            fp = open(file_path,'a+')
            data = pickle.load(fp)
            for module,values in data.items():
                self.addHTMLLog(module,values[1])
             #   html = etree.HTML(values[1])
              #  linkNode = etree.Element('link')
               # linkNode.set('rel',"stylesheet")
                #linkNode.set('type',"text/css")
               # linkNode.set('media',"all")
               # linkNode.set('href',c['buildbotURL']+'css/styles.css')
               # def process(node):
                #    for child in node:
                 #       if child.tag == 'html':
                  #          if len(child.findall('link')):
                   #             for link in child.findall('link'):
                    #                link.set('href',c['buildbotURL']+'css/styles.css')
                     #       elif len(child.findall('head')):
                      #          for head in child.findall('head'):
                       #             if len(head.findall('link')):                 
                        #                for link in head.findall('link'):
                         #                   link.set('href',c['buildbotURL']+'css/styles.css')
                          #          else:
                            #            head.append(linkNode)
                           # else:
                             #   headNode = etree.Element('head')    
                             #   headNode.append(linkNode)
                              #  child.append(headNode)                                       

                        #process(child)
                    #return True
                #process(html)
                #self.addHTMLLog(module,etree.tostring(html))

class Copy(LoggingBuildStep):
    name = 'make-link'

    def describe(self, done=False):
        if done:
            return self.descriptionDone
        return self.description

    def __init__(self, branch=None, workdir=None, addonsdir=None, **kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        self.addFactoryArguments(branch=branch,workdir=workdir, addonsdir=addonsdir)
        self.args = {'workdir': workdir, 'addonsdir':addonsdir}

        # Compute defaults for descriptions:
        description = ["copy", '"'+workdir+'"', "in", '"'+ addonsdir +'"']
        descriptionDone = ["copy", '"'+workdir+'"' , "in", '"' + addonsdir +'"']

        self.description = description
        self.descriptionDone = descriptionDone
        self.branch = branch
    def start(self):
        s = self.build.getSourceStamp()
        modules = []
        for change in s.changes:
            if change.branch != self.branch:
                continue
            for f in change.files:
                module = f.split('/')[0]
                if module not in modules:
                    modules.append(module)
        if len(modules):            
            cmd = LoggedRemoteCommand("copy", self.args)
            self.startCommand(cmd)

class InstallTranslation(LoggingBuildStep):
    name = 'install-translation'
    flunkOnFailure = False
    flunkingIssues = ["ERROR","CRITICAL"]
    MESSAGES = ("ERROR", "CRITICAL", "WARNING")

    def describe(self, done=False):
        if done:
            return self.descriptionDone
        return self.description

    def __init__(self,workdir=None, addonsdir=None,dbname=False,port=8869, netport=8870, **kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        self.addFactoryArguments(workdir=workdir,addonsdir=addonsdir,dbname=dbname, port=port, netport=netport)
        self.args = {'addonsdir': addonsdir,
                     'workdir': workdir,
                     'dbname' : dbname,
                     'netport' : netport,
                     'port' : port,
        }
        self.name = 'install-translation'
        self.description = ["Installing", "Translation"]
        self.descriptionDone = ["Translation","Installed"]

    def start(self):
        s = self.build.getSourceStamp()
        pofiles = []
        for change in s.changes:
            for f in change.files:
                fname,ext = os.path.splitext(f.split('/')[-1])
                if ext == '.po':
                    pofiles.append(f)
        if len(pofiles):
            commands = []
            commands = ["make","Makefile","install-translation"]        

            if self.args['addonsdir']:
                commands.append("addons-path=%s"%(self.args['addonsdir']))            
            if self.args['port']:
                commands.append("port=%s"%(self.args['port']))
            if self.args['dbname']:
                commands.append("database=%s"%(self.args['dbname']))            

            self.args['command'] = commands

            self.description += ["installing", "Translation","Files",":",",".join(pofiles),"on Server","http://localhost:%s"%(self.args['port'])]
            self.descriptionDone += [','.join(pofiles)]     
            
            self.args['command'].append("i18n-import=%s"%(','.join(pofiles)))            
            
            cmd = LoggedRemoteCommand("shell",self.args)
            self.startCommand(cmd)
        else:
            cmd = LoggedRemoteCommand("dummy", self.args)
            self.startCommand(cmd)

    def createSummary(self, log):
        counts = {}
        summaries = {}
        for m in self.MESSAGES:
            counts[m] = 0
            summaries[m] = []

        io = StringIO(log.getText()).readlines()

        for line in io:
            if line.find("Traceback") != -1:
                traceback_log = []
                pos = io.index(line)
                for line in io[pos:-3]:
                    traceback_log.append(line)
                self.addCompleteLog("Install-Translation : Traceback", "".join(traceback_log))
                self.setProperty("Install-Translation : Traceback", str(io[-4]))
                break;
                    
            elif line.find("INFO:") != -1:
                continue
            elif line.find("CRITICAL") != -1:
                pos = line.find("CRITICAL") + len("CRITICAL") + 5
                m = "CRITICAL"
            elif line.find("ERROR") != -1:
                pos = line.find("ERROR") + len("ERROR") + 5
                m = "ERROR"
            elif line.find("WARNING") != -1:
                pos = line.find("WARNING") + len("WARNING") + 5
                m = "WARNING"
            else:
                continue
            line = line[pos:]
            summaries[m].append(line)
            counts[m] += 1
        self.descriptionDone = self.descriptionDone[:]
        for m in self.MESSAGES:
            if counts[m]:
                msg = "".join(summaries[m])
                self.addCompleteLog("Install-Translation : %s" % m, msg)    
                self.setProperty("Install-Translation : %s" % m, counts[m]) 
        if sum(counts.values()):       
            self.setProperty("Install-Translation : MessageCount", sum(counts.values()))

    def evaluateCommand(self, cmd):
        if cmd.rc != 0:
            return FAILURE
        for m in self.flunkingIssues:
            try:
                if self.getProperty("Install-Translation : %s" % m):
                    return FAILURE
            except:
                pass
        try:
            if self.getProperty("Install-Translation : MessageCount"):
                return WARNINGS
        except:
            pass
        return SUCCESS

class InstallModule(LoggingBuildStep):
    name = 'install-module'
    flunkOnFailure = False
    flunkingIssues = ["ERROR","CRITICAL"]
    MESSAGES = ("ERROR", "CRITICAL", "WARNING")

    def describe(self, done=False):
        if done:
            return self.descriptionDone
        return self.description

    def __init__(self,workdir=None, addonsdir=None, modules='', dbname=False,port=8869, netport=8870, **kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        self.addFactoryArguments(workdir=workdir,addonsdir=addonsdir,modules=modules, dbname=dbname, port=port, netport=netport)
        self.args = {'addonsdir': addonsdir,
                     'workdir': workdir,
                     'dbname' : dbname,
                     'modules' : modules,
                     'netport' : netport,
                     'port' : port,
        }
        self.name = 'install-module'
        self.description = ["Installing", "modules %s"%(self.args['modules']),"on Server","http://localhost:%s"%(self.args['port'])]
        self.descriptionDone = ["installed"]

    def start(self):
        s = self.build.getSourceStamp()
        modules = []
        for change in s.changes:
            for f in change.files:
                module = f.split('/')[0]
                if module in ('bin','Makefile','man','README','setup.cfg','setup.py','doc','MANIFEST.in','openerp.log','pixmaps','rpminstall_sh.txt','setup.nsi','win32'):
                    continue
                if module not in modules:
                    modules.append(module)
        
        if len(modules):
            self.args['modules'] += ',' + ','.join(modules)  

        if self.args['modules']:
            self.descriptionDone += [self.args['modules']]       

       
        if self.args['modules']:
            self.args['command'] = ["make","Makefile","install-module"]
            if self.args['addonsdir']:
                self.args['command'].append("addons-path=%s"%(self.args['addonsdir']))
            if self.args['modules']:
                self.args['command'].append("module=%s"%(self.args['modules']))
            if self.args['netport']:
                self.args['command'].append("net_port=%s"%(self.args['netport']))
            if self.args['port']:
                self.args['command'].append("port=%s"%(self.args['port']))
            if self.args['dbname']:
                self.args['command'].append("database=%s"%(self.args['dbname']))

            cmd = LoggedRemoteCommand("shell",self.args)
            self.startCommand(cmd)
        else:
            cmd = LoggedRemoteCommand("dummy", self.args)
            self.startCommand(cmd)
    
    def createSummary(self, log):
        counts = {}
        summaries = {}
        for m in self.MESSAGES:
            counts[m] = 0
            summaries[m] = []

        io = StringIO(log.getText()).readlines()

        for line in io:
            if line.find("Traceback") != -1:
                traceback_log = []
                pos = io.index(line)
                for line in io[pos:-1]:
                    traceback_log.append(line)
                self.addCompleteLog("Install-Module : Traceback", "".join(traceback_log))
                self.setProperty("Install-Module : Traceback", str(io[-2]))
                break;
            elif line.find("INFO") != -1:
                continue                
            elif line.find("CRITICAL") != -1:
                m = "CRITICAL"
                pos = line.find("CRITICAL") + len("CRITICAL") + 5
            elif line.find("ERROR") != -1:
                m = "ERROR"
                pos = line.find("ERROR") + len("ERROR") + 5
            elif line.find("WARNING") != -1:
                m = "WARNING"
                pos = line.find("WARNING") + len("WARNING") + 5
            else:
                continue
            line = line[pos:]
            summaries[m].append(line)
            counts[m] += 1
        self.descriptionDone = self.descriptionDone[:]
        for m in self.MESSAGES:
            if counts[m]:
                msg = "".join(summaries[m])
                self.addCompleteLog("Install-Module : %s" % m, msg)    
                self.setProperty("Install-Module : %s" % m, counts[m]) 
        if sum(counts.values()):
            self.setProperty("Install-Module : MessageCount", sum(counts.values()))

    def evaluateCommand(self, cmd):
        if cmd.rc != 0:
            return FAILURE
        for m in self.flunkingIssues:
            try:
                if self.getProperty("Install-Module : %s" % m):
                    return FAILURE
            except:
                pass   
        try:
            if self.getProperty("Install-Module : MessageCount"):
                return WARNINGS
        except:
            pass
        return SUCCESS

class _Bzr(Bzr):
    def __init__(self, repourl=None, baseURL=None,
                 defaultBranch=None,workdir=None,mode='update',alwaysUseLatest=True,timeout=20*60, retry=None,**kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        Bzr.__init__(self, repourl=repourl, baseURL=baseURL,
                   defaultBranch=defaultBranch,workdir=workdir,mode=mode,alwaysUseLatest=alwaysUseLatest,timeout=timeout,
                   retry=retry,**kwargs)
        self.name = 'bzr-update'
        self.description = ["updating", "branch %s%s"%(baseURL,defaultBranch)]
        self.descriptionDone = ["updated", "branch %s%s"%(baseURL,defaultBranch)]

    def startVC(self, branch, revision, patch):
        Bzr.startVC(self,self.branch, revision, patch)

############ STABLE OFFICIAL ###########

stable_official_factory = BuildFactory()

stable_official_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-server/',defaultBranch='5.0',mode='update',workdir='stable_openobject_server',alwaysUseLatest=True))
stable_official_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-addons/',defaultBranch='5.0',mode='update',workdir='stable_openobject_addons',alwaysUseLatest=True))


stable_official_factory.addStep(CreateDB(dbname='stable-official',workdir='stable_openobject_server',port=8969))

stable_official_factory.addStep(InstallModule(workdir='stable_openobject_server',addonsdir='../stable_openobject_addons',dbname='stable-official',netport=8970, port=8969,modules='base,base_module_quality'))

stable_official_factory.addStep(InstallTranslation(workdir='stable_openobject_server',addonsdir='../stable_openobject_addons',dbname='stable-official',netport=8970, port=8969))

stable_official_factory.addStep(CheckQuality(dbname='stable-official',workdir='stable_openobject_server',netport=8970, port=8969,addonsdir='../stable_openobject_addons'))

stable_official_factory.addStep(DropDB(dbname='stable-official',workdir='stable_openobject_server',port=8969))


############ STABLE + ExtraAddons ###########

stable_extraAddons_factory = BuildFactory()

stable_extraAddons_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-server/',defaultBranch='5.0',mode='update',workdir='stable_openobject_server',alwaysUseLatest=True))
stable_extraAddons_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-addons/',defaultBranch='5.0',mode='update',workdir='stable_openobject_addons',alwaysUseLatest=True))
stable_extraAddons_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp-commiter/openobject-addons/',defaultBranch='stable_5.0_extra-addons',mode='update',workdir='stable_extra_addons',alwaysUseLatest=True))

stable_extraAddons_factory.addStep(CreateDB(dbname='stable-extra',workdir='stable_openobject_server',port=8959))
stable_extraAddons_factory.addStep(Copy(workdir='stable_extra_addons',addonsdir='stable_openobject_addons'))
stable_extraAddons_factory.addStep(InstallModule(workdir='stable_openobject_server',addonsdir='../stable_openobject_addons',dbname='stable-extra', netport=8949, port=8959,modules='base,base_module_quality'))
stable_extraAddons_factory.addStep(InstallTranslation(workdir='stable_openobject_server',addonsdir='../stable_openobject_addons',dbname='stable-extra', netport=8949, port=8959))
stable_extraAddons_factory.addStep(CheckQuality(dbname='stable-extra',workdir='stable_openobject_server', netport=8949, port=8959,addonsdir='../stable_openobject_addons'))
stable_extraAddons_factory.addStep(DropDB(dbname='stable-extra',workdir='stable_openobject_server',port=8959))


############ STABLE + COMMUNITY ###########

stable_community_factory = BuildFactory()

stable_community_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-server/',defaultBranch='5.0',mode='update',workdir='stable_openobject_server',alwaysUseLatest=True))
stable_community_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-addons/',defaultBranch='5.0',mode='update',workdir='stable_openobject_addons',alwaysUseLatest=True))
stable_community_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp-community/openobject-addons/',defaultBranch='trunk-addons-community',mode='update',workdir='stable_addons_community',alwaysUseLatest=True))

stable_community_factory.addStep(CreateDB(dbname='stable-community',workdir='stable_openobject_server',port=8759))
stable_community_factory.addStep(Copy(workdir='stable_addons_community',addonsdir='../stable_openobject_addons'))
stable_community_factory.addStep(InstallModule(workdir='stable_openobject_server',addonsdir='../stable_openobject_addons',dbname='stable-community', netport=8749, port=8759,modules='base,base_module_quality'))
stable_community_factory.addStep(InstallTranslation(workdir='stable_openobject_server',addonsdir='../stable_openobject_addons',dbname='stable-community', netport=8749, port=8759))
stable_community_factory.addStep(CheckQuality(dbname='stable-community',workdir='stable_openobject_server', netport=8749, port=8759,addonsdir='../stable_openobject_addons'))
stable_community_factory.addStep(DropDB(dbname='stable-community',workdir='stable_openobject_server',port=8759))

############ TRUNK OFFICIAL###########

trunk_official_factory = BuildFactory()

#trunk_official_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-server/',defaultBranch='trunk',mode='update',workdir='trunk_openobject_server',alwaysUseLatest=True))
#trunk_official_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-addons/',defaultBranch='trunk',mode='update',workdir='trunk_openobject_addons',alwaysUseLatest=True))

trunk_official_factory.addStep(CreateDB(dbname='trunk-official',workdir='trunk_openobject_server',port=8659))
trunk_official_factory.addStep(InstallModule(workdir='trunk_openobject_server',addonsdir='../trunk_openobject_addons',dbname='trunk-official', netport=8649, port=8659,modules='base,base_module_quality'))
trunk_official_factory.addStep(InstallTranslation(workdir='trunk_openobject_server',addonsdir='../trunk_openobject_addons',dbname='trunk-official', netport=8649, port=8659))
trunk_official_factory.addStep(CheckQuality(dbname='trunk-official',workdir='trunk_openobject_server', netport=8649, port=8659,addonsdir='../trunk_openobject_addons'))
trunk_official_factory.addStep(DropDB(dbname='trunk-official',workdir='trunk_openobject_server',port=8659))

############ TRUNK + ExtraAddons ###########

trunk_extraAddons_factory = BuildFactory()

trunk_extraAddons_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-server/',defaultBranch='trunk',mode='update',workdir='trunk_openobject_server',alwaysUseLatest=True))
trunk_extraAddons_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-addons/',defaultBranch='trunk',mode='update',workdir='trunk_openobject_addons',alwaysUseLatest=True))
trunk_extraAddons_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp-commiter/openobject-addons/',defaultBranch='trunk-extra-addons',mode='update',workdir='trunk_extra_addons',alwaysUseLatest=True))


trunk_extraAddons_factory.addStep(CreateDB(dbname='trunk-extra',workdir='trunk_openobject_server', port=8559))
trunk_extraAddons_factory.addStep(Copy(branch='https://launchpad.net/~openerp-commiter/openobject-addons/trunk-extra-addons',workdir='trunk_extra_addons',addonsdir='../trunk_openobject_addons'))
trunk_extraAddons_factory.addStep(InstallModule(workdir='trunk_openobject_server',addonsdir='../trunk_openobject_addons',dbname='trunk-extra', netport=8549, port=8559, modules='base,base_module_quality'))
trunk_extraAddons_factory.addStep(InstallTranslation(workdir='trunk_openobject_server',addonsdir='../trunk_openobject_addons',dbname='trunk-extra', netport=8549, port=8559))
trunk_extraAddons_factory.addStep(CheckQuality(dbname='trunk-extra',workdir='trunk_openobject_server', netport=8549, port=8559,addonsdir='../trunk_openobject_addons'))
trunk_extraAddons_factory.addStep(DropDB(dbname='trunk-extra',workdir='trunk_openobject_server', port=8559))

############ TRUNK + COMMUNITY ###########

trunk_community_factory = BuildFactory()
trunk_community_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-server/',defaultBranch='trunk',mode='update',workdir='trunk_openobject_server',alwaysUseLatest=True))
trunk_community_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-addons/',defaultBranch='trunk',mode='update',workdir='trunk_openobject_addons',alwaysUseLatest=True))
trunk_community_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp-community/openobject-addons/',defaultBranch='trunk-addons-community',mode='update',workdir='trunk_addons_community',alwaysUseLatest=True))

trunk_community_factory.addStep(CreateDB(dbname='trunk-community',workdir='trunk_openobject_server',port=8459))
trunk_community_factory.addStep(Copy(branch='https://launchpad.net/~openerp-community/openobject-addons/trunk-addons-community',workdir='trunk_addons_community',addonsdir='../trunk_openobject_addons'))
trunk_community_factory.addStep(InstallModule(workdir='trunk_openobject_server',addonsdir='../trunk_openobject_addons',dbname='trunk-community', netport=8449, port=8459,modules='base,base_module_quality'))
trunk_community_factory.addStep(InstallTranslation(workdir='trunk_openobject_server',addonsdir='../trunk_openobject_addons',dbname='trunk-community', netport=8449, port=8459))
trunk_community_factory.addStep(CheckQuality(dbname='trunk-community',workdir='trunk_openobject_server',addonsdir='../trunk_openobject_addons', netport=8449, port=8459))
trunk_community_factory.addStep(DropDB(dbname='trunk-community',workdir='trunk_openobject_server',port=8459))

c['builders'] = [
    {'name':'stableOfficial', 'slavename':'openerp_bot','builddir':'StableOfficial', 'factory':stable_official_factory},
    {'name':'stableExtraAddons', 'slavename':'openerp_bot','builddir':'Stable+ExtraAddons', 'factory':stable_extraAddons_factory},
    {'name':'stableCommunity', 'slavename':'openerp_bot','builddir':'Stable+Community', 'factory':stable_community_factory},
    {'name':'trunkOfficial', 'slavename':'openerp_bot','builddir':'TrunkOfficial', 'factory':trunk_official_factory},
    {'name':'trunkExtraAddons', 'slavename':'openerp_bot','builddir':'Trunk+ExtraAddons', 'factory':trunk_extraAddons_factory},
    {'name':'trunkCommunity', 'slavename':'openerp_bot','builddir':'Trunk+Community', 'factory':trunk_community_factory},
   ]

c['schedulers'] = [ 
    AnyBranchScheduler( name = "Scheduler for stableOfficial",
                        builderNames = ["stableOfficial"],
                        branches = [ 'https://launchpad.net/~openerp/openobject-server/5.0/',
                                     'https://launchpad.net/~openerp/openobject-addons/5.0/'
                                   ],treeStableTimer = 30),

    Scheduler("Scheduler for stable+ExtraAddons",
              'https://launchpad.net/~openerp-commiter/openobject-addons/stable_5.0_extra-addons',30,["stableExtraAddons"]),

    #Scheduler("Scheduler for stable+Community",
    #          'https://launchpad.net/~openerp-community/openobject-addons/trunk-addons-community',30,["stableCommunity"]),

    AnyBranchScheduler( name = "Scheduler for trunkOfficial",
                        builderNames = ["trunkOfficial"],
                        #branches = [ 'https://launchpad.net/~openerp/openobject-server/trunk/',
                         #            'https://launchpad.net/~openerp/openobject-addons/trunk/'
                          #         ],treeStableTimer = 30),
                        branches = [ 'https://launchpad.net/~openerp-commiter/openobject-server/nch-openerp',
                                     'https://launchpad.net/~openerp-commiter/openobject-addons/nch-openerp'
                                   ],treeStableTimer = 30),
    Scheduler("Scheduler for trunk+ExtraAddons",
              'https://launchpad.net/~openerp-commiter/openobject-addons/trunk-extra-addons',30,["trunkExtraAddons"]),

    Scheduler("Scheduler for trunk+Community",
              'https://launchpad.net/~openerp-community/openobject-addons/trunk-addons-community',30,["trunkCommunity"]),
                  ]


# Web Status
from buildbot.status.web import baseweb
from buildbot.status.mail import MailNotifier

baseweb.HEADER = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Open Object Template End -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" >
    <head>
        <title>Open Object</title>
        <meta content="text/html; charset=utf-8" http-equiv="content-type"/>
        <link type="image/x-icon" rel="shortcut icon" href="%(root)sfavicon.ico"/>
        <!-- Open Object Css File Start -->
        <link type="text/css" href="%(root)scss/styles.css" rel="stylesheet"/>
        <!-- Open Object Css File End -->
    </head>
    <body>
        <!-- Main Body Start -->    
        <div id="maincontent">
            <!-- Header Start -->        
            <table width="1004" border="0" cellspacing="0" cellpadding="0">
            <tr>
                <td width="202">
                    <a href="http://openobject.com" alt="Open Object - Free Management Solution Logo"/><img src="%(root)simages/openobject.jpg" border="0"/></a>
                </td>
                <td width="335">
                    <div align="right"><img src="%(root)simages/picture.jpg" width="242" height="68" /></div>
                </td>
                <td width="440" align="right" valign="top">
                    <table id="Table_01" height="35" border="0" cellpadding="0" cellspacing="0">
                    <tr>
                        <td class="greycurveleft" width="23px" height="35px"></td>
                        <td width="107" class="headerlinkgrey">
                            <div class="headerlink" align="center">
                                <a href="http://openerp.com"><strong>Open  ERP</strong></a>
                            </div>
                        </td>
                        <td width="22px" height="35px" class="greyredcurve"></td>
                        <td width="125" height="35" class="headerlinkgrey">
                            <div class="headerlink" align="center">
                                <a href="http://ondemand.openerp.com"><strong>On Demand</strong></a>
                            </div>
                        </td>
                        <td width="20" height="35" class="redcurve">&nbsp;</td>
                        <td width="139" height="35" class="redline">
                            <div class="headerlink" align="center">
                                <a href="http://openobject.com"><strong>Community</strong></a>
                            </div>
                        </td>
                        <td width="16" height="35" ><img src="%(root)simages/redcurveright.jpg"/></td>
                    </tr>
                    </table>
                </td>
            </tr>
            </table>
            <!-- Header End -->        
'''

baseweb.HEAD_ELEMENTS = [    
    '<link href="%(root)sbuildbot.css" rel="stylesheet" type="text/css" />',
    ]
baseweb.BODY_ATTRS = {}

baseweb.FOOTER = '''
<table cellspacing="0" cellpadding="5" border="0" width="1004">
        <tbody><tr>
                <td bgcolor="#ffffff">
                        <div class="footertext">
                                @ 2001-TODAY <a href="http://tiny.be">Tiny sprl</a>. All rights reserved.<br/>
                                OpenERP and OpenObject are trademarks of the Tiny company.<br/>
                                They both are released under GPL V3.0.
                        </div>
                </td>
        </tr></tbody>
</table>
</html>
'''

c['status'] = []
c['status'].append(html.WebStatus(http_port=8010))

from buildbot.status import base
from email.Message import Message
from email.Utils import formatdate
import urllib
from twisted.internet import defer
MAIL_ATTRS = {}


class OpenERPMailNotifier(MailNotifier):
  def __init__(self, username=None, password=None, port=2525,fromaddr=None, mode="all", categories=None, builders=None,
               addLogs=False, relayhost="localhost",
               subject="buildbot %(result)s in %(projectName)s on %(builder)s",
               lookup=None, extraRecipients=[],
               sendToInterestedUsers=True, reply_to=None):
    MailNotifier.__init__(self, fromaddr, mode, categories, builders,
                               addLogs, relayhost, subject, lookup,
                               extraRecipients, sendToInterestedUsers)
    self.reply_to = reply_to
    self._username = username
    self._password = password
    self._port = port

  def buildMessage(self, name, build, results):
    """Send an email about the result. Don't attach the patch as
    MailNotifier.buildMessage do."""

    projectName = self.status.getProjectName()
    ss = build.getSourceStamp()
    build_url = self.status.getURLForThing(build)
    waterfall_url = self.status.getBuildbotURL()
    patch_url_text = ""
    if ss and ss.patch:
      patch_url_text = "Patch: %s/steps/gclient/logs/patch\n\n" % build_url
    failure_bot = ""
    failure_tree = ""
    if results != SUCCESS:
      failure_bot = "(In case the bot is broken)\n"
      failure_tree = "(in case the tree is broken)\n"

    if ss is None:
      source = "unavailable"
    else:
      source = ""
      if ss.branch:
        source += "[branch %s] " % ss.branch
      if ss.revision:
        source += ss.revision
      else:
        source += "" 
      if ss.patch is not None:
        source += " (plus patch)"

    t = build.getText()
    if t:
      t = ": " + " ".join(t)
    else:
      t = ""

    if results == SUCCESS:
      status_text = "OpenERP Builbot succeeded!"
      res = "success"
    elif results == WARNINGS:
      status_text = "OpenERP Buildbot Had Warnings%s" % t
      res = "warnings"
    else:
      status_text = "OpenERP Buildbot FAILED%s" % t
      res = "failure"
    changes = self.message(MAIL_ATTRS,ss.branch)
    text = """

Dear Sir/Madam,

We are sorry to say that your last commit had broken openERP (%s).
Can you please recheck your commit. 

The details are as below:

Run details: %s

%sSlave history: %swaterfall?builder=%s
%s
Build Source Stamp: %s

OpenERP Builbot server waterfall: %s

%s
             %s  

Your Last Commit History: 
%s


Sincerely,
Fabien Pinckaers
CEO Tiny - OpenERP Editor
Chaussée de Namur 40
B-1367 Grand-Rosière
Belgium
Phone: +32.81.81.37.00
Fax: +32.81.73.35.01
Web: http://openerp.com

Great Achievements Start With Tiny Investments ! 
 
""" % (name,
       build_url,
       patch_url_text,
       urllib.quote(waterfall_url, '/:'),
       urllib.quote(name),
       failure_bot,
       source,
       urllib.quote(waterfall_url, '/:'),
       failure_tree,
       status_text,
       changes.encode("utf-8", "replace"))
    m = Message()
    m.set_payload(text)

    m['Date'] = formatdate(localtime=True)
    m['Subject'] = self.subject % {
      'result': res,
      'projectName': projectName,
      'builder': name.upper(),
      'reason': build.getReason(),
    }
    m['From'] = self.fromaddr
    if self.reply_to:
      m['Reply-To'] = self.reply_to
    # now, who is this message going to?
    dl = []
    recipients = self.extraRecipients[:]
    if self.sendToInterestedUsers and self.lookup:
      for u in build.getInterestedUsers():
        d = defer.maybeDeferred(self.lookup.getAddress, u)
        d.addCallback(recipients.append)
        dl.append(d)
    d = defer.DeferredList(dl)
    d.addCallback(self._gotRecipients, recipients, m)
    return d

  def sendMessage(self, m, recipients):
        from twisted.internet.ssl import ClientContextFactory 
        from twisted.internet import reactor
        from twisted.mail.smtp import ESMTPSenderFactory
        from StringIO import StringIO
        from twisted.internet import defer
        s = m.as_string() 
        ds = []
        for recip in recipients:
           if not hasattr(m,'read'):
                # It's not a file
                m = StringIO(str(m))
           d = defer.Deferred()
           factory = ESMTPSenderFactory(self._username, self._password,
                                        self.fromaddr, recip, m, d,
                                        contextFactory=ClientContextFactory())
           reactor.connectTCP(self.relayhost, self._port, factory)
           ds.append(d)
        return defer.DeferredList(ds)
  
  def message(self,attrs,branch = None):
    text = list()
    text.append("")
    text.extend([c.asText() for c in attrs[branch]])
    return ("\n".join(text))

from buildbot.status import mail 
c['status'].append(OpenERPMailNotifier(username="nch",
                                       password="jminta",
                                       fromaddr="support@tinyerp.com",
                                       relayhost="smtp.tinyerp.com",
                                       mode="all",
                                       lookup="tinyerp.com",
                                       subject = 'OpenERP %(builder)s Failure !'))



# bzr pooler class

from zope.interface import implements
from twisted.python import log
from twisted.application import service, internet

from buildbot import util, interfaces
from buildbot.changes.changes import Change

from bzrlib.branch import Branch
import bzrlib

class BzrPoller(service.MultiService, util.ComparableMixin):
    """This source will poll a Bzr repository for changes and submit them to
    the change master."""
    implements(interfaces.IChangeSource)

    compare_attrs = ["location", "pollinterval"]


    parent = None # filled in when we're added
    last_change = None
    loop = None
    working = False

    def __init__(self, location, pollinterval=60*60, callback=False):
        """
        @type  location: string
        @param location: the URL of the branch that this poller should watch.
                         This is typically an http: or sftp: URL.

        @type  pollinterval: int
        @param pollinterval: interval in seconds between polls. The default
                             is 3600 seconds (1 hour). Smaller values
                             decrease the latency between the time a change
                             is recorded and the time the buildbot notices
                             it, but it also increases the system load.
        """
        service.MultiService.__init__(self)

        self.location = location
        self.last_revno = 0
        self.pollinterval = pollinterval
        self.overrun_counter = 0
        self.callback = callback
        timer = internet.TimerService(pollinterval, self.poll)
        timer.setServiceParent(self)

    def describe(self):
        return "BzrPoller watching %s" % self.location

    def poll(self):
        log.msg("BzrPoller polling")
        b = Branch.open_containing(self.location)[0]
        bzrlib.trace.enable_default_logging()
        # this is subclass of bzrlib.branch.Branch
        current_revision = b.revno()
        if not self.last_revno:
            self.last_revno = current_revision - 1
        # NOTE: b.revision_history() does network IO, and is blocking.
        revisions = b.revision_history()[self.last_revno:] # each is an id string
        changes = []
        for r in revisions:
            rev = b.repository.get_revision(r)
            # bzrlib.revision.Revision
            who = rev.committer
            comments = rev.message
            when = rev.timestamp
            # rev.timezone, interesting. Not sure it's used.

            d = b.repository.get_revision_delta(r)
            # this is a delta.TreeDelta
            files = ([f[0] for f in d.added] +
                     [f[0] for f in d.removed] +
                     [f[1] for f in d.renamed] +
                     [f[0] for f in d.modified]
                     )
            revision= r #b.revision_id_to_revno(r) #b.get_rev_id()
            branch= self.location #b.get_master_branch()
            MAIL_ATTRS[branch] = []
            c = Change(who=rev.committer,
                       files=files,
                       comments=rev.message,
                       when=rev.timestamp,
                       revision = revision,
                       branch = branch
                       )
            changes.append(c)
            MAIL_ATTRS[branch].append(c)
        self.last_revno = current_revision
        if self.callback:
            self.callback(self.location,changes)
        for c in changes:
            self.parent.addChange(c)
        log.msg("BzrPoller finished polling, %d changes found" % len(changes))

c['change_source'] = [
       # BzrPoller('https://launchpad.net/~openerp/openobject-server/5.0/'),
       # BzrPoller('https://launchpad.net/~openerp/openobject-addons/5.0/'),
        #BzrPoller('https://launchpad.net/~openerp/openobject-server/trunk/'),
        #BzrPoller('https://launchpad.net/~openerp/openobject-addons/trunk/'),
        #BzrPoller('https://launchpad.net/~openerp-commiter/openobject-addons/trunk-extra-addons'),
        #BzrPoller('https://launchpad.net/~openerp-community/openobject-addons/trunk-addons-community'),
        BzrPoller('https://launchpad.net/~openerp-commiter/openobject-server/nch-openerp'),
        BzrPoller('https://launchpad.net/~openerp-commiter/openobject-addons/nch-openerp'),
        ]

