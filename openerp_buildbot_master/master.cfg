# -*- encoding: utf-8 -*-

from sets import Set
from buildbot.process.factory import BuildFactory
from buildbot.buildslave import BuildSlave
from openobject.scheduler import OpenObjectScheduler, OpenObjectAnyBranchScheduler
from openobject.buildstep import OpenObjectBzr, OpenObjectSVN, CreateDB,  CreateDB2, InstallModule, InstallModule2, InstallTranslation, CheckQuality, DropDB, Copy, StartServer, MakeOpenERPTest
from openobject.poller import BzrPoller
from buildbot.changes.svnpoller import SVNPoller
from openobject.status import web, mail, logs
from openobject import buildstep
from openobject.sql import db_connection
from buildbot import locks

db_lock = locks.MasterLock("database")
cpu_lock = locks.SlaveLock("cpu")
import os

BuildmasterConfig = c = {}
c['projectName'] = "OpenERP-Test"
#c['projectURL'] = 'http://www.openerp.com'
c['buildbotURL'] = "http://test.openobject.com/"

c['slaves'] = [BuildSlave('openerp_bot', 'tiny')]
c['slavePortnum'] = 8999
c['schedulers'] = []
c['builders'] = []
c['change_source']=[]
DBNAME = 'pap102'


### GET BUILDBOT DATA ###

###import xmlrpclib

###def execute(connector, method, *args):
 ###   return getattr(connector,method)(*args)

###conn = xmlrpclib.ServerProxy(uri + '/xmlrpc/object')
###result = execute(conn,'execute', testing, 1, 'admin','buildbot.lp.project','read','openerp_buildbot')

data_dict=[]
query='''
select PR.name as pr_name,
       test_server_BR.name as tester_server_br, test_server_BR.url as tester_server_br_url,
       test_addons_BR.name as tester_addons_br, test_addons_BR.url as tester_addons_br_url,
       BR.id as testing_br_id, BR.name as testing_br_name, BR.url as testing_br_url,
       BR.treestabletimer as treestabletimer,
       BR.dbname as dbname,
       BR.build_directory as builddir
from buildbot_lp_branch as BR
join buildbot_lp_project as PR on BR.lp_project_id = PR.id
join buildbot_lp_branch as test_addons_BR on test_addons_BR.id = PR.tester_addons_branch_id
join buildbot_lp_branch as test_server_BR on test_server_BR.id = PR.tester_server_branch_id
where BR.active = true
'''
db_cn = db_connection(dbname=DBNAME, user='tiny')
rows, col_names = db_cn.get_rows_and_columns(query)
for r in rows:
	d={}
	for j in range (len(col_names)):
		val = str(r[j]).strip()
		d[col_names[j]] = val
  	data_dict.append(d)

### CHANGE SOURCES ###
change_source_urls = list(x['testing_br_url'] for x in data_dict)
change_source_urls = list(Set(change_source_urls))
for url in change_source_urls:
	c['change_source'].append(BzrPoller(url))


### Schedulers, Build_factories, Builders ###
schedulers_names = list(x['sh_name'] for x in data_dict)
schedulers_names = list(Set(schedulers_names))
for sch in schedulers_names:
	builder = [x['bd_name'] for x in data_dict if x['sh_name'] == sch][0]
	change_branch = [(x['testing_br_name'], x['testing_br_url']) for x in data_dict if x['sh_name'] == sch][0]
	change_branch_id = [x['testing_br_id'] for x in data_dict if x['sh_name'] == sch][0]
	tester_server_branch = [(x['tester_server_br'], x['tester_server_br_url']) for x in data_dict if x['sh_name'] == sch][0]
	tester_addons_branch = [(x['tester_addons_br'], x['tester_addons_br_url']) for x in data_dict if x['sh_name'] == sch][0]
	up_branches = [tester_server_branch] + [tester_addons_branch] + [change_branch]

	dbname = list(x['dbname'] for x in data_dict if x['bd_name'] == builder)[0]
	workdir = tester_server_branch[0]
	addonsdir = tester_addons_branch[0]
	builddir = list(x['builddir'] for x in data_dict if x['bd_name'] == builder)[0]

	args=dict(dbname=dbname, workdir=workdir, addonsdir='../'+addonsdir, netport=8949, port=8959,)

	build_factory = BuildFactory()
	for br in up_branches:
		continue
		up_args={'repourl':br[1],
			  'mode':'update',
			  'workdir':br[0],
			  'alwaysUseLatest':True}
		build_factory.addStep(OpenObjectBzr(**up_args))
	build_factory.addStep(MakeOpenERPTest(change_branch_id=change_branch_id, change_branch=change_branch))
	build_factory.addStep(CreateDB(locks=[db_lock],**args))
	build_factory.addStep(InstallModule(**args))
	build_factory.addStep(InstallTranslation(**args))
	build_factory.addStep(CheckQuality(**args))
	del args['addonsdir']
	build_factory.addStep(DropDB(**args))

	bldr = {'name':builder,
			'slavename':'openerp_bot',
			'builddir': builddir,
			'factory':build_factory}
	c['builders'].append(bldr)

	treestabletimer = list(x['treestabletimer'] for x in data_dict if x['sh_name'] == sch)[0]
	args = {'name' : sch,
                'builderNames' : [builder],
                'branch' : change_branch[1],
                'treeStableTimer' : int(treestabletimer),}

	c['schedulers'].append(OpenObjectScheduler(**args))

web.ROOT_PATH =  os.path.abspath('.')
c['status'] = []
c['status'].append(web.OpenObjectWebStatus(http_port=8010))

MAIL_ATTRIBUTES = {
              'mail_watcher'   : ['hmo@tinyerp.com'],
              'want_html_mail' : False, # True value will send mail in HTML
              'sender_username': '',
              'sender_password': '',
              'sender_email'   : 'OpenERP <noreply@tinyerp.com>',
              'reply_to'       : 'support@tinyerp.com',
              'smtp_host'      : 'smtp.tinyerp.com',
              'email_use_TLS'  : True,
              'mode'           : 'failing', # 'all':sends mail when step is either success/failure or had problem.
                                            # 'problem':sends mail when step had problem.
                                            # 'failing':sends mail when step fails.

             }


#c['status'].append(mail.OpenObjectMailNotifier(username = MAIL_ATTRIBUTES['sender_username'],
#                                      password = MAIL_ATTRIBUTES['sender_password'],
#                                      fromaddr = MAIL_ATTRIBUTES['sender_email'],
#                                      reply_to = MAIL_ATTRIBUTES['reply_to'],
#                                      relayhost = MAIL_ATTRIBUTES['smtp_host'],
#                                      mode = MAIL_ATTRIBUTES['mode'],
#                                      extraRecipients = MAIL_ATTRIBUTES['mail_watcher'],
#                                      mail_watcher = MAIL_ATTRIBUTES['mail_watcher'],
#                                      html_body = MAIL_ATTRIBUTES['want_html_mail'],
#                                      TLS = MAIL_ATTRIBUTES['email_use_TLS']))


def split_file(path):
	return ('https://svn.tinyerp.com/be/maintenance', path)


#### unregister the TextLog adapter registered by buildbot
from twisted.python import components
from zope.interface import interface, declarations
from buildbot.interfaces import IStatusLog
from buildbot.status.web.base import IHTMLLog
from buildbot.status.builder import HTMLLogFile

globalRegistry = components.getRegistry()
origInterface = declarations.implementedBy(IStatusLog)

globalRegistry.unregister(declarations.implementedBy(HTMLLogFile), IHTMLLog,'')

#### register a new TextLog adapter
components.registerAdapter(logs.TextLog, IStatusLog, IHTMLLog)
