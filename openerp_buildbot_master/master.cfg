# -*- encoding: utf-8 -*-
from buildbot.process.factory import BuildFactory
from buildbot.buildslave import BuildSlave
from buildbot.steps.source import Source, Bzr
from buildbot.scheduler import AnyBranchScheduler,Scheduler
from buildbot.status import html
from buildbot.steps.shell import ShellCommand
from buildbot.process.buildstep import LoggingBuildStep, LoggedRemoteCommand
from buildbot.status.builder import SUCCESS, FAILURE, WARNINGS
import pickle
import os
from lxml import etree
try:
    import cStringIO
    StringIO = cStringIO.StringIO
except ImportError:
    from StringIO import StringIO

from buildbot.status.web.base import HtmlResource
from buildbot.status.web.baseweb import WebStatus
import xmlrpclib

class GetGraphvalues(HtmlResource):
   
    title = "Graph Values"

    def body(self, req):
        datasets=['',[]]
        try:
            fp = open('bugs.pck','a+')
            datasets = pickle.load(fp)   
        except:
            pass
        data = ''' <span id="label">%s</span><span id="datasets">%s</span> ''' %(datasets[0],datasets[1])
        return data

class webstatus(WebStatus):
    def __init__(self, http_port=None, distrib_port=None, allowForce=False):
        WebStatus.__init__(self, http_port=http_port, distrib_port=distrib_port, allowForce=allowForce)

    def setupUsualPages(self):
        WebStatus.setupUsualPages(self)
        self.putChild("GetGraphvalues", GetGraphvalues())

BuildmasterConfig = c = {}
c['projectName'] = 'OpenERP'
#c['projectURL'] = 'http://www.openerp.com'
c['buildbotURL'] = "http://localhost:8010/"

c['slaves'] = [BuildSlave('openerp_bot', 'tiny')]
c['slavePortnum'] = 8999
c['schedulers'] = []
c['builders'] = []

mail_attrs = {'mail_watcher'   : ['hmo@tinyerp.com','nch@tinyerp.co.in','pap@tinyerp.co.in'],
              'want_html_mail' : False, # True value will send mail in HTML format
              'sender_username': 'nch',
              'sender_password': 'jminta',
              'sender_email'   : 'OpenERP <noreply@tinyerp.com>', 
              'reply_to'       : 'support@tinyerp.com', 
              'smtp_host'      : 'smtp.tinyerp.com',
              'email_use_TLS'  : True,
              'mode'           : 'failing', # 'all':sends mail when step is either success/failure or had problem.  
                                        # 'problem':sends mail when step had problem.  
                                        # 'failing':sends mail when step fails.  
              'subject':'%(projectName)s %(builder)s %(result)s' 
                }



class CreateDB(LoggingBuildStep):
    name = 'create-db'
    flunkOnFailure = False
    def describe(self, done=False,success=False,warn=False,fail=False):
         if done:
            if success:
                return ['Created db %s Sucessfully!'%(self.dbname)]
            if warn:
                return ['Created db %s with Warnings!'%(self.dbname)]
            if fail:
                return ['Creation of db %s Failed!'%(self.dbname)]
         return self.description
    
    def getText(self, cmd, results):
        if results == SUCCESS:
            return self.describe(True, success=True)
        elif results == WARNINGS:
            return self.describe(True, warn=True) 
        else:
            return self.describe(True, fail=True) 


    def __init__(self, dbname='test',workdir=None, addonsdir=None, demo=True, lang='en_US', port=8869 ,**kwargs):

        LoggingBuildStep.__init__(self, **kwargs)
        self.addFactoryArguments(dbname=dbname,workdir=workdir, demo=demo, lang=lang, port=port, addonsdir=addonsdir)
        self.args = {'dbname': dbname,'workdir':workdir, 'demo':demo, 'lang':lang, 'port' : port, 'addonsdir' : addonsdir}
        self.dbname = dbname
        # Compute defaults for descriptions:
        description = ["creating db"]
        self.description = description

    def start(self):
        self.args['command']=["make","Makefile","create-db"]
        if self.args['dbname']:
            self.args['command'].append("database=%s"%(self.args['dbname']))
        if self.args['port']:
            self.args['command'].append("port=%s"%(self.args['port']))
        if self.args['demo']:
            self.args['command'].append("demo=%s"%(self.args['demo']))
        if self.args['addonsdir']:
            self.args['command'].append("addons-path=%s"%(self.args['addonsdir']))
        cmd = LoggedRemoteCommand("shell",self.args)        
        self.startCommand(cmd)
    
    def evaluateCommand(self, cmd):
        if cmd.rc != 0:
            return FAILURE
        return SUCCESS

class DropDB(LoggingBuildStep):
    name = 'drop-db'
    flunkOnFailure = False
    def describe(self, done=False,success=False,warn=False,fail=False):
         if done:
            if success:
                return ['Dropped db %s Sucessfully!'%(self.dbname)]
            if warn:
                return ['Dropped db %s with Warnings!'%(self.dbname)]
            if fail:
                return ['Dropping of db %s Failed!'%(self.dbname)]
         return self.description
    def getText(self, cmd, results):
        if results == SUCCESS:
            return self.describe(True, success=True)
        elif results == WARNINGS:
            return self.describe(True, warn=True) 
        else:
            return self.describe(True, fail=True) 

    def __init__(self, dbname='test',workdir=None,port=8869,**kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        self.addFactoryArguments(dbname=dbname,workdir=workdir,port=port)
        self.args = {'dbname': dbname,'workdir':workdir,'port':port}
        self.dbname = dbname
        # Compute defaults for descriptions:
        description = ["Dropping db"]
        self.description = description

    def start(self):
        self.args['command']=["make","Makefile","drop-db"]
        if self.args['dbname']:
            self.args['command'].append("database=%s"%(self.args['dbname']))
        if self.args['port']:
            self.args['command'].append("port=%s"%(self.args['port']))
        cmd = LoggedRemoteCommand("shell",self.args)        
        self.startCommand(cmd)

    def evaluateCommand(self, cmd):
        if cmd.rc != 0:
            return FAILURE
        return SUCCESS

class CheckQuality(LoggingBuildStep):
    name = 'check-quality'
    flunkOnFailure = True
    MESSAGES = ("ERROR", "CRITICAL", "WARNING")

    def describe(self, done=False,success=False,warn=False,fail=False):
        if done:
            if success:
                return ['Quality Checked  !']
            if warn:
                return ['Check quality had Warnings!']
            if fail:
                return ['Check quality Failed !']
        return self.description
    
    def getText(self, cmd, results):
        if results == SUCCESS:
            return self.describe(True, success=True)
        elif results == WARNINGS:
            return self.describe(True, warn=True) 
        else:
            return self.describe(True, fail=True) 

    def __init__(self, dbname='test',workdir=None,addonsdir=None,netport=8970, port=8869 ,**kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        self.addFactoryArguments(dbname=dbname,workdir=workdir,addonsdir=addonsdir,netport=netport, port=port)
        self.args = {'dbname': dbname, 'modules':'', 'port' :port,'workdir':workdir,'netport':netport,'addonsdir':addonsdir}
        self.dbname = dbname
        # Compute defaults for descriptions:
        description = ["checking quality"]

        self.description = description

    def start(self):
        s = self.build.getSourceStamp()
        modules = []
        for change in s.changes:
            for f in change.files:
                module = f.split('/')[0]
                if module in ('bin','Makefile','man','README','setup.cfg','setup.py','doc','MANIFEST.in','openerp.log','pixmaps','rpminstall_sh.txt','setup.nsi','win32'):
                    continue
                if module not in modules:
                    modules.append(str(module))
        
        self.args['modules'] = ','.join(modules)        
        if self.args['modules']:
            self.description.append(self.args['modules'])
            self.args['command']=["make","Makefile","check-quality"]

            if self.args['addonsdir']:
                self.args['command'].append("addons-path=%s"%(self.args['addonsdir']))
            if self.args['netport']:
                self.args['command'].append("net_port=%s"%(self.args['netport']))
            if self.args['port']:
                self.args['command'].append("port=%s"%(self.args['port']))
            if self.args['modules']:
                self.args['command'].append("module=%s"%(self.args['modules']))
            if self.args['dbname']:
                self.args['command'].append("database=%s"%(self.args['dbname']))
            cmd = LoggedRemoteCommand("shell",self.args)
            self.startCommand(cmd)
        else:
            cmd = LoggedRemoteCommand("dummy", self.args)
            self.startCommand(cmd)

    def createSummary(self, log):
        data = False
        logs = log.getText()
            
        counts = {}
        summaries = {}
        for m in self.MESSAGES:
            counts[m] = 0
            summaries[m] = []

        io = StringIO(log.getText()).readlines()

        for line in io:
            if line.find("ERROR") != -1:
                pos = line.find("ERROR") + len("ERROR") + 5
                m = "ERROR"
            elif line.find("INFO:") != -1:
                continue
            elif line.find("CRITICAL") != -1:
                pos = line.find("CRITICAL") + len("CRITICAL") + 5
                m = "CRITICAL"
            elif line.find("Traceback") != -1:
                traceback_log = []
                pos = io.index(line)
                for line in io[pos:-3]:
                    traceback_log.append(line)
                self.addCompleteLog("Check-Quality : Traceback", "".join(traceback_log))
                break;
            elif line.find("WARNING") != -1:
                pos = line.find("WARNING") + len("WARNING") + 5
                m = "WARNING"
            else:
                continue
            line = line[pos:]
            summaries[m].append(line)
            counts[m] += 1
        for m in self.MESSAGES:
            if counts[m]:
                msg = "".join(summaries[m])
                self.addCompleteLog("Check-Quality : %s" % m, msg)    
                self.setProperty("Check-Quality : %s" % m, counts[m]) 
        if sum(counts.values()):       
            self.setProperty("Check-Quality : MessageCount", sum(counts.values()))

        if logs.find('LOG PATH') != -1:
            path = logs.split('LOG PATH')[1]
            file_path = (path.split('\r'))[0]
            fp = open(file_path,'a+')
            data = pickle.load(fp)
            for module,values in data.items():
                new_detail = values[1]  + '''<head><link rel="stylesheet" type="text/css" href="%scss/quality-log-style.css" media="all"/></head>'''%(c['buildbotURL'])
                self.addHTMLLog(module+':Score(%s)'%(values[0]),new_detail)
                for test,detail in values[2].items():
                     if detail[1] != '':
                        index = detail[1].find('<html>') + len('<html>')
                        new_detail = detail[1][0:index] + '''<table class="table1"><tr><td class="td1"> Module </td><td class="td1"> : </td><th class="th1"> %s </th></tr><tr><td class="td1"> Test </td><td class="td1"> : </td><th class="th1"> %s </th></tr><tr><td class="td1"> Score </b></td><td class="td1"> : </td><th class="th1"> %s </th></table><hr/>'''%(module, test, detail[0]) + detail[1][index:]+ '''<head><link rel="stylesheet" type="text/css" href="%scss/quality-log-style.css" media="all"/></head>'''%(c['buildbotURL'])
                        self.addHTMLLog('%s - %s:Score(%s)'%(module,test,detail[0]),new_detail)


class Copy(LoggingBuildStep):
    name = 'make-link'
    flunkOnFailure = False
    def describe(self, done=False):
        if done:
            return self.descriptionDone
        return self.description

    def __init__(self, branch=None, workdir=None, addonsdir=None, **kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        self.addFactoryArguments(branch=branch,workdir=workdir, addonsdir=addonsdir)
        self.args = {'workdir': workdir, 'addonsdir':addonsdir}

        # Compute defaults for descriptions:
        description = ["copy", '"'+workdir+'"', "in", '"'+ addonsdir +'"']
        descriptionDone = ["copy", '"'+workdir+'"' , "in", '"' + addonsdir +'"']

        self.description = description
        self.descriptionDone = descriptionDone
        self.branch = branch
    def start(self):
        s = self.build.getSourceStamp()
        modules = []
        for change in s.changes:
            if change.branch != self.branch:
                continue
            for f in change.files:
                module = f.split('/')[0]
                if module not in modules:
                    modules.append(module)
        if len(modules):            
            cmd = LoggedRemoteCommand("copy", self.args)
            self.startCommand(cmd)

class InstallTranslation(LoggingBuildStep):
    name = 'install-translation'
    flunkOnFailure = True
    flunkingIssues = ["ERROR","CRITICAL"]
    MESSAGES = ("ERROR", "CRITICAL", "WARNING")

    def describe(self, done=False,success=False,warn=False,fail=False):
        if done:
            if success:
                return ['Translation %s Installed Sucessfully!'%(','.join(self.pofiles))]
            if warn:
                return ['Translation %s Installed with Warnings!'%(','.join(self.pofiles))]
            if fail:
                return ['Translation(s) Installing Failed!']
        return self.description

    def getText(self, cmd, results):
        if results == SUCCESS:
            return self.describe(True, success=True)
        elif results == WARNINGS:
            return self.describe(True, warn=True) 
        else:
            return self.describe(True, fail=True) 

    def __init__(self,workdir=None, addonsdir=None,dbname=False,port=8869, netport=8870, **kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        self.addFactoryArguments(workdir=workdir,addonsdir=addonsdir,dbname=dbname, port=port, netport=netport)
        self.args = {'addonsdir': addonsdir,
                     'workdir': workdir,
                     'dbname' : dbname,
                     'netport' : netport,
                     'port' : port,
        }
        self.name = 'install-translation'
        self.description = ["Installing Translation"]

    def start(self):
        s = self.build.getSourceStamp()
        self.pofiles = []
        for change in s.changes:
            for f in change.files:
                fname,ext = os.path.splitext(f.split('/')[-1])
                if ext == '.po':
                    self.pofiles.append(f)
        if len(self.pofiles):
            commands = []
            commands = ["make","Makefile","install-translation"]        

            if self.args['addonsdir']:
                commands.append("addons-path=%s"%(self.args['addonsdir']))            
            if self.args['port']:
                commands.append("port=%s"%(self.args['port']))
            if self.args['dbname']:
                commands.append("database=%s"%(self.args['dbname']))            

            self.args['command'] = commands

            self.description += ["installing", "Translation","Files",":",",".join(self.pofiles),"on Server","http://localhost:%s"%(self.args['port'])]
            
            self.args['command'].append("i18n-import=../trunk_openobject_addons/%s"%(','.join(self.pofiles)))
            cmd = LoggedRemoteCommand("shell",self.args)
            self.startCommand(cmd)
        else:           
            cmd = LoggedRemoteCommand("dummy", self.args)
            self.startCommand(cmd)

    def createSummary(self, log):
        counts = {}
        summaries = {}
        for m in self.MESSAGES:
            counts[m] = 0
            summaries[m] = []

        io = StringIO(log.getText()).readlines()

        for line in io:
            if line.find("Traceback") != -1:
                traceback_log = []
                pos = io.index(line)
                for line in io[pos:-3]:
                    traceback_log.append(line)
                self.addCompleteLog("Install-Translation : Traceback", "".join(traceback_log))
                self.setProperty("Install-Translation : Traceback", str(io[-4]))
                break;
                    
            elif line.find("INFO:") != -1:
                continue
            elif line.find("CRITICAL") != -1:
                pos = line.find("CRITICAL") + len("CRITICAL") + 5
                m = "CRITICAL"
            elif line.find("ERROR") != -1:
                pos = line.find("ERROR") + len("ERROR") + 5
                m = "ERROR"
            elif line.find("WARNING") != -1:
                pos = line.find("WARNING") + len("WARNING") + 5
                m = "WARNING"
            else:
                continue
            line = line[pos:]
            summaries[m].append(line)
            counts[m] += 1
        for m in self.MESSAGES:
            if counts[m]:
                msg = "".join(summaries[m])
                self.addCompleteLog("Install-Translation : %s" % m, msg)    
                self.setProperty("Install-Translation : %s" % m, counts[m]) 
        if sum(counts.values()):       
            self.setProperty("Install-Translation : MessageCount", sum(counts.values()))

    def evaluateCommand(self, cmd):
        if cmd.rc != 0:
            return FAILURE
        for m in self.flunkingIssues:
            try:
                if self.getProperty("Install-Translation : %s" % m):
                    return FAILURE
            except:
                pass
        try:
            if self.getProperty("Install-Translation : MessageCount"):
                return WARNINGS
        except:
            pass
        return SUCCESS

class InstallModule(LoggingBuildStep):
    name = 'install-module'
    flunkOnFailure = True
    flunkingIssues = ["ERROR","CRITICAL"]
    MESSAGES = ("ERROR", "CRITICAL", "WARNING")

    def describe(self, done=False,success=False,warn=False,fail=False):
        if done:
            if success:
                return ['Module(s) %s installed Sucessfully!'%(self.args['modules'])]
            if warn:
                return ['Installed module(s) had Warnings!']
            if fail:
                return ['Installing module(s) Failed!']
        return self.description

    def getText(self, cmd, results):
        if results == SUCCESS:
            return self.describe(True, success=True)
        elif results == WARNINGS:
            return self.describe(True, warn=True) 
        else:
            return self.describe(True, fail=True)
 
    def __init__(self,workdir=None, addonsdir=None, modules='', dbname=False,port=8869, netport=8870, **kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        self.addFactoryArguments(workdir=workdir,addonsdir=addonsdir,modules=modules, dbname=dbname, port=port, netport=netport)
        self.args = {'addonsdir': addonsdir,
                     'workdir': workdir,
                     'dbname' : dbname,
                     'modules' : modules,
                     'netport' : netport,
                     'port' : port,
        }
        self.name = 'install-module'
        self.description = ["Installing", "modules %s"%(self.args['modules']),"on Server","http://localhost:%s"%(self.args['port'])]

    def start(self):
        s = self.build.getSourceStamp()
        modules = []
        for change in s.changes:
            for f in change.files:
                module = f.split('/')[0]
                if module in ('bin','Makefile','man','README','setup.cfg','setup.py','doc','MANIFEST.in','openerp.log','pixmaps','rpminstall_sh.txt','setup.nsi','win32'):
                    continue
                if module not in modules:
                    modules.append(module)
        if len(modules):
            self.args['modules'] += ','.join(modules)  

        if self.args['modules']:
            self.args['command'] = ["make","Makefile","install-module"]
            if self.args['addonsdir']:
                self.args['command'].append("addons-path=%s"%(self.args['addonsdir']))
            if self.args['modules']:
                self.args['command'].append("module=%s"%(self.args['modules']))
            if self.args['netport']:
                self.args['command'].append("net_port=%s"%(self.args['netport']))
            if self.args['port']:
                self.args['command'].append("port=%s"%(self.args['port']))
            if self.args['dbname']:
                self.args['command'].append("database=%s"%(self.args['dbname']))
            cmd = LoggedRemoteCommand("shell",self.args)
            self.startCommand(cmd)
        else:
            cmd = LoggedRemoteCommand("dummy", self.args)
            self.startCommand(cmd)
    
    def createSummary(self, log):
        counts = {}
        summaries = {}
        for m in self.MESSAGES:
            counts[m] = 0
            summaries[m] = []

        io = StringIO(log.getText()).readlines()

        for line in io:
            if line.find("Traceback") != -1:
                traceback_log = []
                pos = io.index(line)
                for line in io[pos:-1]:
                    traceback_log.append(line)
                self.addCompleteLog("Install-Module : Traceback", "".join(traceback_log))
                self.setProperty("Install-Module : Traceback", str(io[-2]))
                break;
            elif line.find("INFO") != -1:
                continue                
            elif line.find("CRITICAL") != -1:
                m = "CRITICAL"
                pos = line.find("CRITICAL") + len("CRITICAL") + 5
            elif line.find("ERROR") != -1:
                m = "ERROR"
                pos = line.find("ERROR") + len("ERROR") + 5
            elif line.find("WARNING") != -1:
                m = "WARNING"
                pos = line.find("WARNING") + len("WARNING") + 5
            else:
                continue
            line = line[pos:]
            summaries[m].append(line)
            counts[m] += 1
        for m in self.MESSAGES:
            if counts[m]:
                msg = "".join(summaries[m])
                self.addCompleteLog("Install-Module : %s" % m, msg)    
                self.setProperty("Install-Module : %s" % m, counts[m]) 
        if sum(counts.values()):
            self.setProperty("Install-Module : MessageCount", sum(counts.values()))

    def evaluateCommand(self, cmd):
        if cmd.rc != 0:
            return FAILURE
        for m in self.flunkingIssues:
            try:
                if self.getProperty("Install-Module : %s" % m):
                    return FAILURE
            except:
                pass   
        try:
            if self.getProperty("Install-Module : MessageCount"):
                return WARNINGS
        except:
            pass
        return SUCCESS


class _Bzr(Bzr):
    def __init__(self, repourl=None, baseURL=None,
                 defaultBranch=None,workdir=None,mode='update',alwaysUseLatest=True,timeout=20*60, retry=None,**kwargs):
        LoggingBuildStep.__init__(self, **kwargs)
        Bzr.__init__(self, repourl=repourl, baseURL=baseURL,
                   defaultBranch=defaultBranch,workdir=workdir,mode=mode,alwaysUseLatest=alwaysUseLatest,timeout=timeout,
                   retry=retry,**kwargs)
        self.name = 'bzr-update'
        self.description = ["updating", "branch %s%s"%(baseURL,defaultBranch)]
        self.descriptionDone = ["updated", "branch %s%s"%(baseURL,defaultBranch)]

    def startVC(self, branch, revision, patch):
        Bzr.startVC(self,self.branch, revision, patch)


############ TRUNK OFFICIAL###########

trunk_official_factory = BuildFactory()

trunk_official_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-server/',defaultBranch='trunk',mode='update',workdir='trunk_openobject_server',alwaysUseLatest=True))
trunk_official_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-addons/',defaultBranch='trunk',mode='update',workdir='trunk_openobject_addons',alwaysUseLatest=True))

trunk_official_factory.addStep(CreateDB(dbname='trunk-official',workdir='trunk_openobject_server',addonsdir='../trunk_openobject_addons',port=8659))
trunk_official_factory.addStep(InstallModule(workdir='trunk_openobject_server',addonsdir='../trunk_openobject_addons',dbname='trunk-official', netport=8649, port=8659))
trunk_official_factory.addStep(InstallTranslation(workdir='trunk_openobject_server',addonsdir='../trunk_openobject_addons',dbname='trunk-official', netport=8649, port=8659))
trunk_official_factory.addStep(CheckQuality(dbname='trunk-official',workdir='trunk_openobject_server', netport=8649, port=8659,addonsdir='../trunk_openobject_addons'))
trunk_official_factory.addStep(DropDB(dbname='trunk-official',workdir='trunk_openobject_server',port=8659))

############ TRUNK + ExtraAddons ###########

trunk_extraAddons_factory = BuildFactory()

trunk_extraAddons_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-server/',defaultBranch='trunk',mode='update',workdir='trunk_openobject_server',alwaysUseLatest=True))
trunk_extraAddons_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-addons/',defaultBranch='trunk',mode='update',workdir='trunk_openobject_addons',alwaysUseLatest=True))
trunk_extraAddons_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp-commiter/openobject-addons/',defaultBranch='trunk-extra-addons',mode='update',workdir='trunk_extra_addons',alwaysUseLatest=True))

trunk_extraAddons_factory.addStep(CreateDB(dbname='trunk-extra',workdir='trunk_openobject_server',addonsdir='../trunk_openobject_addons',port=8559))
trunk_extraAddons_factory.addStep(Copy(branch='https://launchpad.net/~openerp-commiter/openobject-addons/trunk-extra-addons',workdir='trunk_extra_addons',addonsdir='../trunk_openobject_addons'))
trunk_extraAddons_factory.addStep(InstallModule(workdir='trunk_openobject_server',addonsdir='../trunk_openobject_addons',dbname='trunk-extra', netport=8549, port=8559))
trunk_extraAddons_factory.addStep(InstallTranslation(workdir='trunk_openobject_server',addonsdir='../trunk_openobject_addons',dbname='trunk-extra', netport=8549, port=8559))
trunk_extraAddons_factory.addStep(CheckQuality(dbname='trunk-extra',workdir='trunk_openobject_server', netport=8549, port=8559,addonsdir='../trunk_openobject_addons'))
trunk_extraAddons_factory.addStep(DropDB(dbname='trunk-extra',workdir='trunk_openobject_server', port=8559))

############ TRUNK + COMMUNITY ###########

trunk_community_factory = BuildFactory()

trunk_community_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-server/',defaultBranch='trunk',mode='update',workdir='trunk_openobject_server',alwaysUseLatest=True))
trunk_community_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp/openobject-addons/',defaultBranch='trunk',mode='update',workdir='trunk_openobject_addons',alwaysUseLatest=True))
trunk_community_factory.addStep(_Bzr(baseURL='https://launchpad.net/~openerp-community/openobject-addons/',defaultBranch='trunk-addons-community',mode='update',workdir='trunk_addons_community',alwaysUseLatest=True))

trunk_community_factory.addStep(CreateDB(dbname='trunk-community',workdir='trunk_openobject_server', addonsdir='../trunk_openobject_addons', port=8459))
trunk_community_factory.addStep(Copy(branch='https://launchpad.net/~openerp-community/openobject-addons/trunk-addons-community',workdir='trunk_addons_community',addonsdir='../trunk_openobject_addons'))
trunk_community_factory.addStep(InstallModule(workdir='trunk_openobject_server',addonsdir='../trunk_openobject_addons',dbname='trunk-community', netport=8449, port=8459))
trunk_community_factory.addStep(InstallTranslation(workdir='trunk_openobject_server',addonsdir='../trunk_openobject_addons',dbname='trunk-community', netport=8449, port=8459))
trunk_community_factory.addStep(CheckQuality(dbname='trunk-community',workdir='trunk_openobject_server',addonsdir='../trunk_openobject_addons', netport=8449, port=8459))
trunk_community_factory.addStep(DropDB(dbname='trunk-community',workdir='trunk_openobject_server',port=8459))

c['builders'] = [
    {'name':'trunkOfficial', 'slavename':'openerp_bot','builddir':'TrunkOfficial', 'factory':trunk_official_factory},
    {'name':'trunkExtraAddons', 'slavename':'openerp_bot','builddir':'Trunk+ExtraAddons', 'factory':trunk_extraAddons_factory},
    {'name':'trunkCommunity', 'slavename':'openerp_bot','builddir':'Trunk+Community', 'factory':trunk_community_factory},
   ]

c['schedulers'] = [ 
    AnyBranchScheduler( name = "Scheduler for trunkOfficial",
                        builderNames = ["trunkOfficial"],
                        branches = [ 'https://launchpad.net/~openerp/openobject-server/trunk/',
                                     'https://launchpad.net/~openerp/openobject-addons/trunk/'
                                   ],treeStableTimer = 30),

    Scheduler("Scheduler for trunk+ExtraAddons",
              'https://launchpad.net/~openerp-commiter/openobject-addons/trunk-extra-addons',30,["trunkExtraAddons"]),

    Scheduler("Scheduler for trunk+Community",
              'https://launchpad.net/~openerp-community/openobject-addons/trunk-addons-community',30,["trunkCommunity"]),
                  ]


# Web Status
from buildbot.status.web import baseweb


baseweb.HEADER = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Open Object Template End -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" >
    <head>
        <title>OpenERP Integration Server</title>
        <meta content="text/html; charset=utf-8" http-equiv="content-type"/>
        <link type="image/x-icon" rel="shortcut icon" href="%(root)sfavicon.ico"/>
        <!-- Open Object Css File Start -->
        <link type="text/css" href="%(root)scss/styles.css" rel="stylesheet"/>
        <!-- Open Object Css File End -->
    </head>
    <body>
        <!-- Main Body Start -->    
        <div id="maincontent">
            <!-- Header Start -->        
            <table width="1004" border="0" cellspacing="0" cellpadding="0">
            <tr>
                <td width="202">
                    <a href="http://openobject.com" alt="Open Object - Free Management Solution Logo"/><img src="%(root)simages/openobject.jpg" border="0"/></a>
                </td>
                <td width="335">
                    <div align="right"><img src="%(root)simages/picture.jpg" width="242" height="68" /></div>
                </td>
                <td width="440" align="right" valign="top">
                    <table id="Table_01" height="35" border="0" cellpadding="0" cellspacing="0">
                    <tr>
                        <td class="greycurveleft" width="23px" height="35px"></td>
                        <td width="107" class="headerlinkgrey">
                            <div class="headerlink" align="center">
                                <a href="http://openerp.com"><strong>Open  ERP</strong></a>
                            </div>
                        </td>
                        <td width="22px" height="35px" class="greyredcurve"></td>
                        <td width="125" height="35" class="headerlinkgrey">
                            <div class="headerlink" align="center">
                                <a href="http://ondemand.openerp.com"><strong>On Demand</strong></a>
                            </div>
                        </td>
                        <td width="20" height="35" class="redcurve">&nbsp;</td>
                        <td width="139" height="35" class="redline">
                            <div class="headerlink" align="center">
                                <a href="http://openobject.com"><strong>Community</strong></a>
                            </div>
                        </td>
                        <td width="16" height="35" ><img src="%(root)simages/redcurveright.jpg"/></td>
                    </tr>
                    </table>
                </td>
            </tr>
            </table>
            <!-- Header End -->        
'''

baseweb.HEAD_ELEMENTS = [    
    '<link href="%(root)sbuildbot.css" rel="stylesheet" type="text/css" />',
    ]
baseweb.BODY_ATTRS = {}

baseweb.FOOTER = '''
<table cellspacing="0" cellpadding="5" border="0" width="1004">
        <tbody><tr>
                <td bgcolor="#ffffff">
                        <div class="footertext">
                                @ 2001-TODAY <a href="http://tiny.be">Tiny sprl</a>. All rights reserved.<br/>
                                OpenERP and OpenObject are trademarks of the Tiny company.<br/>
                                They both are released under GPL V3.0.
                        </div>
                </td>
        </tr></tbody>
</table>
</html>
'''
from buildbot.status import html
c['status'] = []
#c['status'].append(html.WebStatus(http_port=8010))
c['status'].append(webstatus(http_port=8010))

from buildbot.status.mail import MailNotifier
from buildbot.status import base
from email.Message import Message
import urllib
import smtplib    
from email.MIMEText import MIMEText
from email.MIMEMultipart import MIMEMultipart
from email.Header import Header
from email.Utils import formatdate, COMMASPACE

class OpenERPMailNotifier(MailNotifier):
  def __init__(self, username=None, password=None, port=2525,fromaddr=None, mode="failing", categories=None, builders=None,
               addLogs=False, relayhost="localhost",
               subject="buildbot %(result)s in %(projectName)s on %(builder)s",
               lookup=None, extraRecipients=[],
               sendToInterestedUsers=True, reply_to=None):
    MailNotifier.__init__(self, fromaddr, mode, categories, builders,
                               addLogs, relayhost, subject, lookup,
                               extraRecipients, sendToInterestedUsers)
    self.reply_to = reply_to
    self._username = username
    self._password = password
    self._port = port
    self._body = ''

  def buildMessage(self, name, build, results):
    """Send an email about the result. Don't attach the patch as
    MailNotifier.buildMessage do."""

    projectName = self.status.getProjectName()
    ss = build.getSourceStamp()
    build_url = self.status.getURLForThing(build)
    waterfall_url = self.status.getBuildbotURL()
    if ss is None:
      source = "unavailable"
    else:
      source = ""
      if ss.branch:
        source += "[branch %s] " % ss.branch
      if ss.revision:
        source += ss.revision
      else:
        source += "" 

    t = build.getText()
    failed_step = []
    for i in range(1,len(t)):
      failed_step.append(t[i])
    if failed_step:
        failed_step = " ".join(failed_step)
    else:
      failed_step = ""

    if results == SUCCESS:
      status_text = "OpenERP Builbot succeeded !"
      res = "success"
    elif results == WARNINGS:
      status_text = "OpenERP Buildbot Had Warnings !"
      res = "warnings"
    else:
      status_text = "OpenERP Buildbot FAILED !" 
      res = "failure"

    change = list(ss.changes)
    m = Message()
    if mail_attrs['want_html_mail']:
        self._body = self.get_HTML_mail(name,build_url,waterfall_url,failed_step,status_text,change[0])
    else:
        self._body = self.get_TEXT_mail(name,build_url,waterfall_url,failed_step,status_text,change[0])

    self.subject = self.subject % {
      'result': res,
      'projectName': c['projectName'],
      'builder': name.upper(),
      'reason': build.getReason(),
    }
    recipients = []
    for u in build.getInterestedUsers():
        recipients.append(u)
    return self.sendMessage(m, recipients)  

  def get_HTML_mail(self,name='',build_url=None,waterfall_url=None,failed_step='',status_text='',change=''):
    files = [f.encode('utf-8') for f in change.files]
    html_mail = """
           <html>
            <body>
            <var>
            Hello %s,<br/><br/>
            We are sorry to say that your last commit had broken %s (%s).
Can you please recheck your commit ?<br/><br/></var>
            <table bordercolor="black" align="left">
            <tr>
                <td><b>The details are as below:</b>
                    <tr>
                        <td align="left">Dashboard:</td>
                        <td align="left"><a href=%s>%s</a></td>
                    </tr>
                    <tr>
                        <td align="left">Run details:</td>
                        <td align="left"><a href=%s>%s</a></td>
                    </tr>
                    <tr>
                        <td align="left">Waterfall:</td>
                        <td align="left"><a href=%swaterfall?builder=%s>%swaterfall?builder=%s</a></td>
                    </tr>
                    <tr>
                        <td align="left">Step(s) Failed:</td>
                        <td align="left"><font color="red">%s</font></td>
                    </tr>
                    <tr>
                            <td align="left">Status:</td>
                            <td align="left"><font color="red">%s</font></td>
                            
                    </tr>
                    <tr>
                        <td><b>Commit History:</b>
                            <tr>
                                <td align="left">Changed by:</td>
                                <td align="left">%s</td>
                            </tr>
                            <tr>
                                <td align="left">Changed at:</td>
                                <td align="left">%s</td>
                            </tr>
                            <tr>
                                <td align="left">Branch:</td>
                                <td align="left"><a href=%s>%s</td>
                            </tr>
                            <tr>
                                <td align="left">Revision:</td>
                                <td align="left">%s</td>
                            </tr>
                            <tr>
                                <td align="left">Changed files:</td>
                                <td align="left"><font size="3">%s</font></td>
                            </tr>
                            <tr>
                                <td align="left">Comments:</td>
                                <td align="left"><font size="3">%s</font></td>
                            </tr>
                        </td>
                    </tr>
                    <tr></tr>
                    <tr></tr>
                    <tr></tr>
                    <tr></tr>
                    <tr></tr>
                    <tr>
                        <td>Regards,
                            <tr>
                                <td><font color="red">OpenERP Quality Team</font></td>
                            </tr>
                            <tr>
                                <td>Great Achievements Start With Tiny Investments !</td>
                            </tr>
                       </td>
                    </tr>
                </td>
                </tr>
            </table>
            </body>
            </html>
            """ % (change.who[:change.who.index('<')],
                   c['projectName'],
                   name,
                   urllib.quote(waterfall_url, '/:'),
                   urllib.quote(waterfall_url, '/:'),
                   build_url,
                   build_url,
                   urllib.quote(waterfall_url, '/:'),
                   urllib.quote(name),
                   urllib.quote(waterfall_url, '/:'),
                   urllib.quote(name),
                   failed_step,
                   status_text,
                   change.who,
                   formatdate(change.when,usegmt=True),
                   change.branch,
                   change.branch,
                   change.revision,
                   '<br/>'.join(files),
                   change.comments)
    return html_mail  

  def get_TEXT_mail(self,name='',build_url=None,waterfall_url=None,failed_step='',status_text='',change=''):
    files = [f.encode('utf-8') for f in change.files]
    text_mail = """Hello %s,

We are sorry to say that your last commit had broken %s (%s).
Can you please recheck your commit ?

The details are as below:

Dashboard      : %s 
Run details    : %s
Waterfall      : %swaterfall?builder=%s
Step(s) Failed : %s
Status         : %s

Commit History:

Changed by     : %s
Changed at     : %s
Branch         : %s
Revision       : %s
Changed files  : %s
Comments       : %s


Regards,
OpenERP Quality Team

Great Achievements Start With Tiny Investments !
            """ % (change.who[:change.who.index('<')],
                   c['projectName'],
                   name,
                   urllib.quote(waterfall_url, '/:'),
                   build_url,
                   urllib.quote(waterfall_url, '/:'),
                   urllib.quote(name),
                   failed_step,
                   status_text,
                   change.who,
                   formatdate(change.when,usegmt=True),
                   change.branch,
                   change.revision,
                   '\n'.join(files),
                   change.comments)
    return text_mail  

  def sendMessage(self, m, recipients):

    email_to = recipients
    email_cc = mail_attrs['mail_watcher']
    email_from = self.fromaddr
    email_reply_to = self.reply_to
    smtp_user = self._username
    smtp_password = self._password
    port = str(self._port)
    smtp_server = self.relayhost
    subject = self.subject
    body = self._body
    subtype = 'plain'

    if mail_attrs['want_html_mail']:
        subtype ='html'
    msg = MIMEText(body or '',_subtype=subtype, _charset='utf-8')

    msg['Subject'] = Header(subject.decode('utf8'), 'utf-8')
    msg['From'] = email_from
    msg['To'] = COMMASPACE.join(email_to)
    msg['Cc'] = COMMASPACE.join(email_cc)
    msg['Reply-To'] = email_reply_to
    msg['Date'] = formatdate(localtime=True,usegmt=True)
    try:
        s = smtplib.SMTP()
        s.connect(smtp_server,port)
        if smtp_user and smtp_password:
           if mail_attrs['email_use_TLS']: # deliberately start tls if using TLS
               s.ehlo()
               s.starttls()
               s.ehlo()
           s.login(smtp_user, smtp_password)
        s.sendmail(email_from, email_to + email_cc, msg.as_string())
        s.quit()
    except Exception, e:
        print "Exception:",e
    return True   

#c['status'].append(OpenERPMailNotifier(username = mail_attrs['sender_username'],
 #                                      password = mail_attrs['sender_password'],
  #                                     fromaddr = mail_attrs['sender_email'],
   #                                    reply_to = mail_attrs['reply_to'],
    #                                   relayhost = mail_attrs['smtp_host'],
     #                                  mode = mail_attrs['mode'],
      #                                 subject = mail_attrs['subject'],
       #                                extraRecipients = mail_attrs['mail_watcher']))

# bzr pooler class

from zope.interface import implements
from twisted.python import log
from twisted.application import service, internet

from buildbot import util, interfaces
from buildbot.changes.changes import Change

from bzrlib.branch import Branch
import bzrlib

class BzrPoller(service.MultiService, util.ComparableMixin):
    """This source will poll a Bzr repository for changes and submit them to
    the change master."""
    implements(interfaces.IChangeSource)

    compare_attrs = ["location", "pollinterval"]


    parent = None # filled in when we're added
    last_change = None
    loop = None
    working = False

    def __init__(self, location, pollinterval=60*60, callback=False):
        """
        @type  location: string
        @param location: the URL of the branch that this poller should watch.
                         This is typically an http: or sftp: URL.

        @type  pollinterval: int
        @param pollinterval: interval in seconds between polls. The default
                             is 3600 seconds (1 hour). Smaller values
                             decrease the latency between the time a change
                             is recorded and the time the buildbot notices
                             it, but it also increases the system load.
        """
        service.MultiService.__init__(self)

        self.location = location
        self.last_revno = 0
        self.pollinterval = pollinterval
        self.overrun_counter = 0
        self.callback = callback
        timer = internet.TimerService(pollinterval, self.poll)
        timer.setServiceParent(self)

    def describe(self):
        return "BzrPoller watching %s" % self.location

    def poll(self):
        log.msg("BzrPoller polling")
        b = Branch.open_containing(self.location)[0]
        bzrlib.trace.enable_default_logging()
        # this is subclass of bzrlib.branch.Branch
        current_revision = b.revno()
        if not self.last_revno:
            self.last_revno = current_revision - 1
        # NOTE: b.revision_history() does network IO, and is blocking.
        revisions = b.revision_history()[self.last_revno:] # each is an id string
        changes = []
        for r in revisions:
            rev = b.repository.get_revision(r)
            # bzrlib.revision.Revision
            who = rev.committer
            comments = rev.message
            when = rev.timestamp
            # rev.timezone, interesting. Not sure it's used.

            d = b.repository.get_revision_delta(r)
            # this is a delta.TreeDelta
            files = ([f[0] for f in d.added] +
                     [f[0] for f in d.removed] +
                     [f[1] for f in d.renamed] +
                     [f[0] for f in d.modified]
                     )
            revision= r #b.revision_id_to_revno(r) #b.get_rev_id()
            branch= self.location #b.get_master_branch()
            c = Change(who=rev.committer,
                       files=files,
                       comments=rev.message,
                       when=rev.timestamp,
                       revision = revision,
                       branch = branch
                       )
            changes.append(c)
        self.last_revno = current_revision
        if self.callback:
            self.callback(self.location,changes)
        for c in changes:
            self.parent.addChange(c)
        log.msg("BzrPoller finished polling, %d changes found" % len(changes))

c['change_source'] = [

        BzrPoller('https://launchpad.net/~openerp/openobject-server/trunk/'),
        BzrPoller('https://launchpad.net/~openerp/openobject-addons/trunk/'),
        BzrPoller('https://launchpad.net/~openerp-commiter/openobject-addons/trunk-extra-addons'),
        BzrPoller('https://launchpad.net/~openerp-community/openobject-addons/trunk-addons-community'),
        ]
